<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[诗人的咸鱼]]></title>
  <subtitle><![CDATA[生活不止有眼前的苟且,还有诗和远方]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://willnewii.github.io/"/>
  <updated>2016-12-02T07:04:06.000Z</updated>
  <id>http://willnewii.github.io/</id>
  
  <author>
    <name><![CDATA[诗人的咸鱼]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[intellij IDEA 快捷键]]></title>
    <link href="http://willnewii.github.io/20161202/intellij%20IDEA%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://willnewii.github.io/20161202/intellij IDEA 快捷键/</id>
    <published>2016-12-02T07:03:00.000Z</published>
    <updated>2016-12-02T07:04:06.000Z</updated>
    <content type="html"><![CDATA[<h4 id="js:忽略相关目录">js:忽略相关目录</h4><p>在搜索方法的时候,有时候会把dist目录里的方法显示出来.可以在preferences-&gt;Directories 里把不相关的目录过滤掉(excluded).</p>
<h4 id="查看改行代码的修改记录">查看改行代码的修改记录</h4><p>移动到行号位置,右键选择annotate.</p>
<h4 id="抽取">抽取</h4><p>alt+cmd+v  变量抽取<br>alt+cmd+f  成员变量抽取<br>alt+cmd+m  方法   抽取</p>
<h4 id="函数重构Refactor">函数重构Refactor</h4><h4 id="让主先行">让主先行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写你关心的,再写动词</span></span><br><span class="line"> <span class="string">"hello"</span><span class="class">.sout</span></span><br><span class="line"> <span class="string">"hello"</span><span class="class">.return</span></span><br><span class="line"> name<span class="class">.null</span> 			<span class="comment">//判断name==null</span></span><br><span class="line"> name<span class="class">.nn</span>   			<span class="comment">//判断name!=null</span></span><br><span class="line"> count<span class="class">.for</span>			<span class="comment">//for循环</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>快捷键</th>
<th>位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>跳转到父类</td>
<td>cmd+u</td>
<td>Navigate-&gt;Super method</td>
</tr>
<tr>
<td>跳转到定义</td>
<td>cmd+b</td>
<td>Navigate-&gt;declaration</td>
</tr>
<tr>
<td>跳转到实现</td>
<td>cmd+alt+b</td>
<td>Navigate-&gt;implementation(s)</td>
</tr>
<tr>
<td>返回</td>
<td>cmd+[</td>
<td>Navigate-&gt;Back</td>
</tr>
<tr>
<td>显示文件路径</td>
<td>alt+cmd+F12</td>
<td>Navigate-&gt;File Path</td>
<td>不用再目录里右键Reveal in Finder</td>
</tr>
<tr>
<td>double shift</td>
<td></td>
<td>search Everywhere</td>
</tr>
<tr>
<td>code</td>
<td></td>
</tr>
<tr>
<td>增强选择-扩大</td>
<td></td>
<td>Edit-&gt;extend selection</td>
</tr>
<tr>
<td>增强选择-收缩</td>
<td></td>
<td>Edit-&gt;shrink selection</td>
</tr>
<tr>
<td>显示参数信息</td>
<td>cmd+p</td>
<td>View-&gt;Paramaeter Info</td>
</tr>
<tr>
<td>提取</td>
<td></td>
<td></td>
</tr>
<tr>
<td>变量提取</td>
<td>alt+cmd+v</td>
<td>Refactor-&gt;Extract-&gt;Variable</td>
</tr>
<tr>
<td>方法提取</td>
<td>alt+cmd+m</td>
<td>Refactor-&gt;Extract-&gt;Method</td>
</tr>
<tr>
<td>移动</td>
<td></td>
</tr>
<tr>
<td>单词移动</td>
<td>alt</td>
</tr>
<tr>
<td>行尾首</td>
<td>cmd</td>
</tr>
</tbody>
</table>
<p><strong>add:2016-12-02</strong></p>
<h4 id="常用快捷键">常用快捷键</h4><table>
<thead>
<tr>
<th>名称</th>
<th>action</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>复制当前行</td>
<td>duplicate Line or block</td>
<td>cmd+d</td>
<td></td>
</tr>
<tr>
<td>删除当前行</td>
<td>delete line</td>
<td>cmd+backspace</td>
<td></td>
</tr>
<tr>
<td>上下移动当前行</td>
<td>move line up/down</td>
<td>alt+shift+up/down</td>
<td></td>
</tr>
<tr>
<td>移动到指定行</td>
<td>Line</td>
<td>cmd+g</td>
<td></td>
</tr>
<tr>
<td>多文本选择</td>
<td>add selection for next occurrence</td>
<td>Ctrl+G</td>
<td></td>
</tr>
<tr>
<td>列选择</td>
<td></td>
<td>Alt+MouseDrag</td>
<td></td>
</tr>
<tr>
<td>当前文件方法列表</td>
<td>File Structure</td>
<td>cmd+F12</td>
<td></td>
</tr>
<tr>
<td>合并行和文字</td>
<td>join lines</td>
<td>ctrl+shift+j</td>
<td></td>
</tr>
<tr>
<td>代码提示</td>
<td>basic</td>
<td>ctrl+/</td>
<td>记得按tab…</td>
</tr>
<tr>
<td>显示文件路径</td>
<td>File Path</td>
<td>alt+cmd+F12</td>
<td>不用再目录里右键Reveal in Finder</td>
</tr>
<tr>
<td>路径中查找</td>
<td>Find in Path</td>
<td>shift+ctrl+F</td>
<td>有个预览功能,屌</td>
</tr>
<tr>
<td>方法调用路径</td>
<td></td>
<td>ctrl+alt+h</td>
<td></td>
</tr>
<tr>
<td>显示参数信息</td>
<td>Parameter Info</td>
<td>cmd+p</td>
<td>显示方法需要的参数</td>
</tr>
<tr>
<td>打开文件</td>
<td>class</td>
<td>cmd+o</td>
<td></td>
</tr>
<tr>
<td>重写方法列表</td>
<td>override method</td>
<td>cmd+n</td>
<td></td>
</tr>
<tr>
<td>快速查看定义</td>
<td>quick definition</td>
<td>cmd+shift+i</td>
<td></td>
</tr>
<tr>
<td>扩大/收缩选中部分</td>
<td>Collapse</td>
<td>cmd+ -/+</td>
<td></td>
</tr>
<tr>
<td>大小写转换</td>
<td>Unshelve</td>
<td>cmd+shift+u</td>
<td></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h4 id="跳转">跳转</h4><table>
<thead>
<tr>
<th>名称</th>
<th>action</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>最近打开的文件</td>
<td>Recent Files</td>
<td>cmd+e</td>
<td></td>
</tr>
<tr>
<td>最近编辑的文件</td>
<td>Recently Changed Files</td>
<td>cmd+shift+e</td>
<td></td>
</tr>
<tr>
<td>显示使用的地方</td>
<td>Find Usage</td>
<td>alt+F7 cmd+alt+F7</td>
<td></td>
</tr>
<tr>
<td>跳到声明</td>
<td>declaration</td>
<td>cmd+b</td>
<td></td>
</tr>
<tr>
<td>跳到实现</td>
<td>implementation</td>
<td>cmd+alt+b</td>
<td></td>
</tr>
<tr>
<td>跳到类型声明</td>
<td>Type declaration</td>
<td>cmd+shift+b</td>
<td></td>
</tr>
<tr>
<td>跳到父类</td>
<td>Super Method</td>
<td>cmd+u</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="Code">Code</h4><table>
<thead>
<tr>
<th>名称</th>
<th>action</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>格式化代码</td>
<td>Reformat Code</td>
<td>cmd+alt+l</td>
<td></td>
</tr>
<tr>
<td>移动方法</td>
<td>Move Statement</td>
<td>cmd+delete+up/down</td>
<td></td>
</tr>
<tr>
<td>包裹代码块</td>
<td>Surround With</td>
<td>cmd+alt+t</td>
<td>添加包裹代码块(if、for、try等)</td>
</tr>
<tr>
<td>反向包裹代码块</td>
<td>Surround With</td>
<td>cmd+shift+delete</td>
<td>删除包裹的代码块</td>
</tr>
<tr>
<td>选择于</td>
<td></td>
<td>alt+F1</td>
<td>select Target,可用于快速打开文件目录</td>
</tr>
<tr>
<td>弹出VCS操作</td>
<td>VCS Operations Popup</td>
<td>Ctrl+V</td>
<td></td>
</tr>
<tr>
<td>查找方法</td>
<td>Find Action</td>
<td>cmd+shift+a</td>
</tr>
<tr>
<td>隐藏所有面板</td>
<td>hide all tool windows</td>
<td>cmd+shift+F12</td>
</tr>
</tbody>
</table>
<h4 id="书签">书签</h4><table>
<thead>
<tr>
<th>名称</th>
<th>action</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>开关书签</td>
<td>Toggle Bookmark</td>
<td>F3</td>
<td></td>
</tr>
<tr>
<td>用助记符开关书签</td>
<td>Toggle Bookmark with Mnemonic</td>
<td>cmd+f3</td>
<td></td>
</tr>
<tr>
<td>显示书签</td>
<td>Show Bookmark</td>
<td>shift+F3</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="插件">插件</h4><table>
<thead>
<tr>
<th>名称</th>
<th>下载</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>CodeGlance</td>
<td><a href="https://github.com/Vektah/CodeGlance" target="_blank" rel="external">https://github.com/Vektah/CodeGlance</a></td>
<td>代码地图</td>
<td></td>
</tr>
<tr>
<td>adb-idea</td>
<td><a href="https://github.com/pbreault/adb-idea" target="_blank" rel="external">https://github.com/pbreault/adb-idea</a></td>
<td>快速清空应用缓存,删除,重新启动,停止</td>
</tr>
<tr>
<td>GsonFormat</td>
<td><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">https://github.com/zzz40500/GsonFormat</a></td>
<td>json转换对象</td>
</tr>
</tbody>
</table>
<p><strong>add:215-11-25</strong></p>
<h4 id="参考">参考</h4><ul>
<li><a href="http://www.jianshu.com/p/364b94a664ff" target="_blank" rel="external">Intellij IDEA 一些不为人知的技巧</a></li>
<li><a href="https://v.qq.com/x/page/t0163iqlus1.html" target="_blank" rel="external">操作视频1</a></li>
<li><a href="https://github.com/lightningMan/config/blob/master/intellij/shortcut-readme.md" target="_blank" rel="external">shortcut-readme</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="js:忽略相关目录">js:忽略相关目录</h4><p>在搜索方法的时候,有时候会把dist目录里的方法显示出来.可以在preferences-&gt;Directories 里把不相关的目录过滤掉(excluded).</p>
<h4 id="查看改行代码的修改记录">查看改行代码的修改记录</h4><p>移动到行号位置,右键选择annotate.</p>
<h4 id="抽取">抽取</h4><p>alt+cmd+v  变量抽取<br>alt+cmd+f  成员变量抽取<br>alt+cmd+m  方法   抽取</p>
<h4 id="函数重构Refactor">函数重构Refactor</h4><h4 id="让主先行">让主先行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写你关心的,再写动词</span></span><br><span class="line"> <span class="string">"hello"</span><span class="class">.sout</span></span><br><span class="line"> <span class="string">"hello"</span><span class="class">.return</span></span><br><span class="line"> name<span class="class">.null</span> 			<span class="comment">//判断name==null</span></span><br><span class="line"> name<span class="class">.nn</span>   			<span class="comment">//判断name!=null</span></span><br><span class="line"> count<span class="class">.for</span>			<span class="comment">//for循环</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>快捷键</th>
<th>位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>跳转到父类</td>
<td>cmd+u</td>
<td>Navigate-&gt;Super method</td>
</tr>
<tr>
<td>跳转到定义</td>
<td>cmd+b</td>
<td>Navigate-&gt;declaration</td>
</tr>
<tr>
<td>跳转到实现</td>
<td>cmd+alt+b</td>
<td>Navigate-&gt;implementation(s)</td>
</tr>
<tr>
<td>返回</td>
<td>cmd+[</td>
<td>Navigate-&gt;Back</td>
</tr>
<tr>
<td>显示文件路径</td>
<td>alt+cmd+F12</td>
<td>Navigate-&gt;File Path</td>
<td>不用再目录里右键Reveal in Finder</td>
</tr>
<tr>
<td>double shift</td>
<td></td>
<td>search Everywhere</td>
</tr>
<tr>
<td>code</td>
<td></td>
</tr>
<tr>
<td>增强选择-扩大</td>
<td></td>
<td>Edit-&gt;extend selection</td>
</tr>
<tr>
<td>增强选择-收缩</td>
<td></td>
<td>Edit-&gt;shrink selection</td>
</tr>
<tr>
<td>显示参数信息</td>
<td>cmd+p</td>
<td>View-&gt;Paramaeter Info</td>
</tr>
<tr>
<td>提取</td>
<td></td>
<td></td>
</tr>
<tr>
<td>变量提取</td>
<td>alt+cmd+v</td>
<td>Refactor-&gt;Extract-&gt;Variable</td>
</tr>
<tr>
<td>方法提取</td>
<td>alt+cmd+m</td>
<td>Refactor-&gt;Extract-&gt;Method</td>
</tr>
<tr>
<td>移动</td>
<td></td>
</tr>
<tr>
<td>单词移动</td>
<td>alt</td>
</tr>
<tr>
<td>行尾首</td>
<td>cmd</td>
</tr>
</tbody>
</table>
<p><strong>add:2016-12-02</strong></p>
<h4 id="常用快捷键">常用快捷键</h4><table>
<thead>
<tr>
<th>名称</th>
<th>action</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>复制当前行</td>
<td>duplicate Line or block</td>
<td>cmd+d</td>
<td></td>
</tr>
<tr>
<td>删除当前行</td>
<td>delete line</td>
<td>cmd+backspace</td>
<td></td>
</tr>
<tr>
<td>上下移动当前行</td>
<td>move line up/down</td>
<td>alt+shift+up/down</td>
<td></td>
</tr>
<tr>
<td>移动到指定行</td>
<td>Line</td>
<td>cmd+g</td>
<td></td>
</tr>
<tr>
<td>多文本选择</td>
<td>add selection for next occurrence</td>
<td>Ctrl+G</td>
<td></td>
</tr>
<tr>
<td>列选择</td>
<td></td>
<td>Alt+MouseDrag</td>
<td></td>
</tr>
<tr>
<td>当前文件方法列表</td>
<td>File Structure</td>
<td>cmd+F12</td>
<td></td>
</tr>
<tr>
<td>合并行和文字</td>
<td>join lines</td>
<td>ctrl+shift+j</td>
<td></td>
</tr>
<tr>
<td>代码提示</td>
<td>basic</td>
<td>ctrl+/</td>
<td>记得按tab…</td>
</tr>
<tr>
<td>显示文件路径</td>
<td>File Path</td>
<td>alt+cmd+F12</td>
<td>不用再目录里右键Reveal in Finder</td>
</tr>
<tr>
<td>路径中查找</td>
<td>Find in Path</td>
<td>shift+ctrl+F</td>
<td>有个预览功能,屌</td>
</tr>
<tr>
<td>方法调用路径</td>
<td></td>
<td>ctrl+alt+h</td>
<td></td>
</tr>
<tr>
<td>显示参数信息</td>
<td>Parameter Info</td>
<td>cmd+p</td>
<td>显示方法需要的参数</td>
</tr>
<tr>
<td>打开文件</td>
<td>class</td>
<td>cmd+o</td>
<td></td>
</tr>
<tr>
<td>重写方法列表</td>
<td>override method</td>
<td>cmd+n</td>
<td></td>
</tr>
<tr>
<td>快速查看定义</td>
<td>quick definition</td>
<td>cmd+shift+i</td>
<td></td>
</tr>
<tr>
<td>扩大/收缩选中部分</td>
<td>Collapse</td>
<td>cmd+ -/+</td>
<td></td>
</tr>
<tr>
<td>大小写转换</td>
<td>Unshelve</td>
<td>cmd+shift+u</td>
<td></td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="Android" scheme="http://willnewii.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[github.io 自定义域名]]></title>
    <link href="http://willnewii.github.io/20161201/github-io-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <id>http://willnewii.github.io/20161201/github-io-自定义域名/</id>
    <published>2016-12-01T08:00:48.000Z</published>
    <updated>2016-12-01T08:03:05.000Z</updated>
    <content type="html"><![CDATA[<p>最近想把github.io的页面绑定一个域名,看了一下教程,操作如下:</p>
<ol>
<li><p>首先在你的username.github.io项目页面,点击settings.Options-&gt;GitHub Pages-&gt;Custom domain 填写上你需要绑定的域名,然后save. 设置完,你在访问原pages域名应该会自动跳转的你刚填写的域名上,但是没有东西…因为你还没有添加映射.</p>
</li>
<li><p>打开你的域名管理页面.添加一条解析记录.</p>
<ul>
<li>记录类型  CNAME  </li>
<li>主机记录  blog(我就像绑定一个子域名)   </li>
<li>记录值 username.github.io(这里是指向你的pages页面) </li>
</ul>
</li>
</ol>
<p>这样设置完,你就可以通过自己的域名进行访问了.</p>
<h4 id="参考">参考</h4><p><a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="external">using-a-custom-domain-with-github-pages</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近想把github.io的页面绑定一个域名,看了一下教程,操作如下:</p>
<ol>
<li><p>首先在你的username.github.io项目页面,点击settings.Options-&gt;GitHub Pages-&gt;Custom domain 填写上]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[选个dock真难呀...]]></title>
    <link href="http://willnewii.github.io/20161201/%E9%80%89%E4%B8%AAdock%E7%9C%9F%E9%9A%BE%E5%91%80/"/>
    <id>http://willnewii.github.io/20161201/选个dock真难呀/</id>
    <published>2016-12-01T04:19:54.000Z</published>
    <updated>2016-12-05T03:22:13.000Z</updated>
    <content type="html"><![CDATA[<p>自己的电脑是14年的macbook air.最近想外接两个屏幕试试,于是就在网上找能支持的设备.后来就看到了他-&gt;belkin的<a href="http://www.belkin.com/us/F4U085/p/P-F4U085/" target="_blank" rel="external">Thunderbolt™ 2 Express Dock HD with Cable</a>,一见倾心,一见钟情！！！!然后就深深的中毒了.思前想后一个月还是买了.</p>
<p>这个设备提供了2个雷电口(因为有一个雷电口要连接主机,其实只有一个),1个hdmi,3个usb,还有耳机口.<br>本来是以为可以通过1个HDMI连接一台显示器,再通过一个雷电口转接线,再连接另外一个显示器.谁知道结果是只有一个显示器工作.本来是因为连接线或者显示设备的问题.就一个搜索,后来在<a href="http://www.caldigit.com/thunderbolt-2-dock-TS2/index-cn.asp" target="_blank" rel="external">thunderbolt-2-dock-TS2</a>(另外一款同类型产品)的官网找到了解释.</p>
<p><strong>要同时支援两个屏幕输出的先决条件为，其中一台必需是Thunderbolt显示器，而另一台则是非Thunderbolt显示器(HDMI, DVI, mDP)。如果想要同时使用两台非Thunderbolt的显示器时，则必须确定在同一个菊链群组中除了TS2还有其他的Thunderbolt设备，再藉由此设备的连接埠串联第二台非Thunderbolt显示器。 (例如，电脑+CalDigit TS2+另一部Thunderbolt设备。)</strong></p>
<p>大致意思就是要想外接两个屏幕有两个方案</p>
<ol>
<li>你要有一台Thunderbolt的显示器.注意,这里有一个很二的事情.Thunderbolt是向下兼容mDP的.事实上通过Thunderbolt转mDP的显示设备dock也是能工作,但是!!!双屏是不支持的.网上有很多,我猜…是都没用过的人,在这类产品面前把Thunderbolt和mDP画了等号.切记…要求是支持Thunderbolt显示器,而不是mDP的显示器.</li>
<li>组一个菊花链群组.我理解的就是你要有两台dock类型的设备,各自连上一个显示器.或者是自己的显示器支持菊花链,貌似也可以.(⊙o⊙)…听起来很复杂对不对…这个我也没有实践过,所以实施难度不得而知.</li>
</ol>
<p>总结:单凭一个dock,外接两个显示器,基本上不可行(要不你有苹果显示器,要不你用两个dock组一个群组).而且,这个结论应该是针对同类型的dock,而不止belkin一家.最新款的Thunderbolt™ 3 Express Dock HD with Cable,不再讨论范围内，</p>
<h3 id="dell_d3100"><a href="http://accessories.ap.dell.com/sna/productdetail.aspx?c=cn&amp;l=zh&amp;s=dhs&amp;cs=cndhs1&amp;sku=452-11717" target="_blank" rel="external">dell d3100</a></h3><p>这是在一顿查找过程中看到的第二个类型的dock.基于DisplayLink<a href="http://baike.baidu.com/link?url=cDRcvhQBFn8ORoaqRJjH-G9yUrrXG_us5VpwD7vocTmmukraiiASa4cIfbV7vAXvfxbjb2jYc5tuQSMaICjjd8tybZV3nR5eSvOkxmpOl5m" target="_blank" rel="external">(百度百科)</a>技术.</p>
<p>DisplayLink是一个通过USB接口实现显示器连接到电脑的连接技术，可以非常简单、方便的连接电脑和多个显示设备。该技术可以通过USB接口扩展虚拟的电脑的桌面。目前DisplayLink技术最多可以支持6台显示器同时显示32位色彩的任意分辨率画面。</p>
<p>跟贝尔金们相比,一个是基于雷电接口,一个是基于USB.听起来是low了好多…不过没有连接上的限制.而且目前以前的方案就这两种.于是就入手了一台.</p>
<p>今天刚到货,通过两个HDMI接口,连接两台显示器,然后一个usb连接测试手机,一个usb连接键盘,一个耳机口.基本完成了我之前对belkin所预期的任务.而且现在air还空出来了一个雷电口,爽~</p>
<p>PS：在网上看到说,USB在数据传输上本来不如雷电的,在扩展出去可能会更慢,甚至影响使用.如果你只是需要一个快速传输数据的hub,应该belkin们更适合.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己的电脑是14年的macbook air.最近想外接两个屏幕试试,于是就在网上找能支持的设备.后来就看到了他-&gt;belkin的<a href="http://www.belkin.com/us/F4U085/p/P-F4U085/" target="_blank" ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Thunderbolt]]></title>
    <link href="http://willnewii.github.io/20161111/Thunderbolt/"/>
    <id>http://willnewii.github.io/20161111/Thunderbolt/</id>
    <published>2016-11-11T03:30:00.000Z</published>
    <updated>2016-11-11T03:31:28.000Z</updated>
    <content type="html"><![CDATA[<h4 id="名词解释">名词解释</h4><p>美国当地时间2011年2月24日，英特尔正式发布了已经宣传数月的英特尔实验室产品代号为“Light Peak”技术，并将其命名为“Thunderbolt（雷电）”。Thunderbolt的研发初衷是为了替代并统一目前电脑上数量繁多性能参差不齐的扩展接口，比如SCSI, SATA, USB, FireWire和 PCI Express。Thunderbolt 是苹果与英特尔（Intel）的合作产物，由Intel开发，通过和苹果的技术合作推向市场。<br><strong>原来不是苹果独家</strong></p>
<h4 id="原理性能">原理性能</h4><p>Thunderbolt连接技术融合了PCI Express数据传输技术和DisplayPort显示技术，由一颗Intel专用控制芯片进行驱动，通过PCI Express x4、DisplayPort总线与系统芯片组相连。其中PCI Express用于数据传输，DisplayPort则用于显示信号传输，亦可通过直接连接英特尔处理器集成图形核心进行DisplayPort显示输出。<br><strong>所以他可以传输图像,又可以传输数据</strong></p>
<h4 id="Thunderbolt_3">Thunderbolt 3</h4><p>Thunderbolt和USB同样是数据端口。英特尔周二宣布,Thunderbolt 3将改变其形式与USB Type-C统一端口。将不再使用以前的方块式的接口，而是兼容USB3.1的标准，但是仍会保留标志性的闪电logo。<br><strong>Thunderbolt3兼容USB Type-C,就是长的像Type-C 的Thunderbolt3</strong></p>
<h4 id="菊花链(daisy_chain)">菊花链(daisy chain)</h4><p>像给自己的air连接两台显示器.<a href="https://www.zhihu.com/question/22600143" target="_blank" rel="external">Macbook Air 能否连双显示器（非苹果显示器）？</a></p>
<h4 id="资料">资料</h4><ul>
<li><a href="http://baike.baidu.com/link?url=6q-lfP_Llb0YKPuXuA1k8oZrKJebV81VXdlch31beke5nJULzGgl1OOs3fAv5VoSP7B01IYCVhpn5UaUYjrfla" target="_blank" rel="external">USB Type-C百度百科</a></li>
<li><a href="http://www.ggjrw.com/zixun/hulianwang/2015-06-03/3943.html" target="_blank" rel="external">Thunderbolt3兼容USB Type-C，完爆USB 3.1</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="名词解释">名词解释</h4><p>美国当地时间2011年2月24日，英特尔正式发布了已经宣传数月的英特尔实验室产品代号为“Light Peak”技术，并将其命名为“Thunderbolt（雷电）”。Thunderbolt的研发初衷是为了替代并统一目前电脑上数量繁]]>
    </summary>
    
      <category term="杂记" scheme="http://willnewii.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Element]]></title>
    <link href="http://willnewii.github.io/20160805/Element/"/>
    <id>http://willnewii.github.io/20160805/Element/</id>
    <published>2016-08-05T10:21:33.000Z</published>
    <updated>2016-08-05T10:24:44.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://stackoverflow.com/questions/4106538/difference-between-offsetheight-and-clientheight" target="_blank" rel="external">元素位置</a><br><img src="http://obfmtiyt5.bkt.clouddn.com/zWca7.png" alt="1"></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://stackoverflow.com/questions/4106538/difference-between-offsetheight-and-clientheight" target="_blank" rel="external]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6 笔记]]></title>
    <link href="http://willnewii.github.io/20160727/ES6-%E7%AC%94%E8%AE%B0/"/>
    <id>http://willnewii.github.io/20160727/ES6-笔记/</id>
    <published>2016-07-27T02:35:00.000Z</published>
    <updated>2016-07-29T02:15:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="let_var_const_区别">let var const 区别</h3><h4 id="const">const</h4><ul>
<li>const 的定义是不可重新赋值的值，与不可变的值(immutable value)不同；const 定义的Object，在定义之后仍可以修改其属性。</li>
</ul>
<h4 id="const_let">const let</h4><ul>
<li>let 关键词声明的变量不具备变量提升（hoisting）特性(先定义,再使用)</li>
<li>let 和 const 声明只在最靠近的一个块中（花括号内）有效(作用域只在当前代码块)</li>
<li>const 在声明时必须被赋值</li>
</ul>
<h3 id="函数默认值">函数默认值</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let getFinalPrice = <span class="function"><span class="params">(price, tax=<span class="number">0.7</span>)</span> =&gt;</span> price + price * tax;</span><br><span class="line">getFinalPrice(<span class="number">500</span>); <span class="regexp">//</span> <span class="number">850</span></span><br></pre></td></tr></table></figure>
<h3 id="模板语法和分隔符">模板语法和分隔符</h3><p>ES6 中有一种十分简洁的方法组装一堆字符串和变量。</p>
<ul>
<li>${ … } 用来渲染一个变量</li>
<li>` 作为分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">'Barret'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;user&#125;</span>!`</span>); <span class="comment">// Hi Barret!</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="for…of_VS_for…in">for…of VS for…in</h3><p>for…of 用于遍历一个迭代器，如数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nicknames = [<span class="string">'di'</span>, <span class="string">'boo'</span>, <span class="string">'punkeye'</span>];</span><br><span class="line">nicknames.size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">of</span> nicknames) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line">Result: di, boo, punkeye</span><br></pre></td></tr></table></figure></p>
<p>for…in 用来遍历对象中的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nicknames = [<span class="string">'di'</span>, <span class="string">'boo'</span>, <span class="string">'punkeye'</span>];</span><br><span class="line">nicknames.size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">in</span> nicknames) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line">Result: <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, size</span><br></pre></td></tr></table></figure></p>
<h3 id="Map_和_WeakMap">Map 和 WeakMap</h3><p>WeakMap 就是一个 Map，只不过它的所有 key 都是弱引用，意思就是 WeakMap 中的东西垃圾回收时不考虑，使用它不用担心内存泄漏问题。</p>
<h3 id="Set_和_WeakSet">Set 和 WeakSet</h3><p>Set 对象是一组不重复的值，重复的值将被忽略，值类型可以是原始类型(number,string,boolean,null,undefined)和引用类型</p>
<p>可以通过 forEach 和 for…of 来遍历 Set 对象：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mySet.<span class="keyword">forEach</span>((item) =&gt; &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 'strings'</span></span><br><span class="line">    <span class="comment">// Object &#123; a: 1, b: 2 &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="Promises">Promises</h3><p>ES6 对 Promise 有了原生的支持，一个 Promise 是一个等待被异步执行的对象，当它执行完成后，其状态会变成 resolved 或者 rejected。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* condition */</span>) &#123;</span><br><span class="line">    <span class="comment">// fulfilled successfully</span></span><br><span class="line">    resolve(<span class="comment">/* value */</span>);  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// error, rejected</span></span><br><span class="line">    reject(<span class="comment">/* reason */</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>每一个 Promise 都有一个 .then 方法，这个方法接受两个参数，第一个是处理 resolved 状态的回调，一个是处理 rejected 状态的回调：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="params">(val)</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Promise Resolved"</span>, val),</span><br><span class="line">       <span class="function"><span class="params">(err)</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Promise Rejected"</span>, err));</span><br></pre></td></tr></table></figure></p>
<h3 id="模块化">模块化</h3><h4 id="export,import_命令">export,import 命令</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="literal">export</span> <span class="keyword">var</span> name = <span class="string">'Rainbow'</span></span><br></pre></td></tr></table></figure>
<p>ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Rainbow'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="string">'24'</span>;</span><br><span class="line"><span class="literal">export</span> &#123;name, age&#125;;</span><br></pre></td></tr></table></figure></p>
<p>定义好模块的输出以后就可以在另外一个模块通过import引用。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br></pre></td></tr></table></figure></p>
<h4 id="整体输入，module指令">整体输入，module指令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>通过 <strong>import * as</strong> 就完成了模块整体的导入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test form <span class="string">'./test.js'</span>;</span><br></pre></td></tr></table></figure></p>
<p>通过指令 <strong>module</strong> 也可以达到整体的输入。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> test <span class="keyword">from</span> <span class="string">'test.js'</span>;</span><br><span class="line">test.getName();</span><br></pre></td></tr></table></figure></p>
<h3 id="资源">资源</h3><ul>
<li><p><a href="http://qiutc.me/post/es6-cheatsheet.html" target="_blank" rel="external">es6 手册</a></p>
</li>
<li><p><a href="http://www.barretlee.com/blog/2016/07/09/a-kickstarter-guide-to-writing-es6/" target="_blank" rel="external">ECMAScript 6 扫盲</a></p>
</li>
<li><p><a href="http://blog.csdn.net/lihongxun945/article/details/49031383" target="_blank" rel="external">ES6详解八：模块（Module）！</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000002789651" target="_blank" rel="external">[ JS 进阶 ] 基本类型 引用类型 简单赋值 对象引用</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="let_var_const_区别">let var const 区别</h3><h4 id="const">const</h4><ul>
<li>const 的定义是不可重新赋值的值，与不可变的值(immutable value)不同；const 定义的Objec]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular 资料]]></title>
    <link href="http://willnewii.github.io/20160721/Angular-%E8%B5%84%E6%96%99/"/>
    <id>http://willnewii.github.io/20160721/Angular-资料/</id>
    <published>2016-07-21T09:19:00.000Z</published>
    <updated>2016-07-19T02:50:41.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Angular_2">Angular 2</h4><ul>
<li><p><a href="https://angular.cn/" target="_blank" rel="external">angular2 中文站</a></p>
</li>
<li><p><a href="https://angular.cn/docs/ts/latest/cookbook/ts-to-js.html" target="_blank" rel="external">TS-to-JS</a></p>
</li>
<li><p><a href="http://yuyang041060120.github.io/" target="_blank" rel="external">yuyang blog</a></p>
</li>
<li><p><a href="http://learnangular2.com/" target="_blank" rel="external">learnangular2 Built by the Ionic Team</a></p>
</li>
<li><p><a href="https://github.com/gf-rd/blog/issues/21" target="_blank" rel="external">Angular2开发指南- 翻译系列总览</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000004973632" target="_blank" rel="external">Angular2 Dependency Injection</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000003781566" target="_blank" rel="external">前端之Angular2实战：依赖注入详解与应用(2015)</a></p>
</li>
</ul>
<h4 id="Angular_1-x">Angular 1.x</h4><ul>
<li><p><a href="http://docs.ngnice.com/guide" target="_blank" rel="external">Angular文档指南</a></p>
</li>
<li><p><a href="https://gitcafe.com/Angularjs/Angularjs-Developer-Guide/blob/master/README.md" target="_blank" rel="external">Angular中文开发指南</a></p>
</li>
</ul>
<h4 id="issue">issue</h4><ul>
<li><a href="http://hicc.me/minify-concat-angular-js-with-gulp/" target="_blank" rel="external">使用gulp压缩合并AngularJS项目中js</a></li>
<li><a href="http://blog.jobbole.com/62249/" target="_blank" rel="external">AngularJS 指令实践指南 </a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Angular_2">Angular 2</h4><ul>
<li><p><a href="https://angular.cn/" target="_blank" rel="external">angular2 中文站</a></p>
</li>
<li><p>]]>
    </summary>
    
      <category term="angular2" scheme="http://willnewii.github.io/tags/angular2/"/>
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iTerm2 快捷键]]></title>
    <link href="http://willnewii.github.io/20160504/iTerm2-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://willnewii.github.io/20160504/iTerm2-快捷键/</id>
    <published>2016-05-04T07:39:00.000Z</published>
    <updated>2016-05-04T07:39:57.000Z</updated>
    <content type="html"><![CDATA[<h4 id="编辑">编辑</h4><table>
<thead>
<tr>
<th>action</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>到行首</td>
<td>ctrl + a</td>
</tr>
<tr>
<td>到行尾</td>
<td>ctrl + e</td>
</tr>
<tr>
<td>清除当前行</td>
<td>ctrl + u</td>
</tr>
<tr>
<td>清屏1</td>
<td>command + r</td>
</tr>
<tr>
<td>删除当前光标的字符</td>
<td>ctrl + d</td>
</tr>
<tr>
<td>删除光标之前的字符</td>
<td>ctrl + h</td>
</tr>
<tr>
<td>删除光标之前的单词</td>
<td>ctrl + w</td>
</tr>
<tr>
<td>删除到文本末尾</td>
<td>ctrl + k</td>
</tr>
</tbody>
</table>
<h4 id="标签">标签</h4><table>
<thead>
<tr>
<th>action</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>新建标签</td>
<td>command + t</td>
</tr>
<tr>
<td>关闭标签</td>
<td>command + w</td>
</tr>
<tr>
<td>切换标签</td>
<td>command + 数字, command + 左右方向键</td>
</tr>
<tr>
<td>切换全屏</td>
<td>command + enter</td>
</tr>
<tr>
<td>查找</td>
<td>command + f</td>
</tr>
</tbody>
</table>
<h4 id="分屏">分屏</h4><table>
<thead>
<tr>
<th>action</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>垂直分屏</td>
<td>command + d</td>
</tr>
<tr>
<td>水平分屏</td>
<td>command + shift + d</td>
</tr>
<tr>
<td>切换屏幕</td>
<td>command + option + 方向键 command + [ 或 command + ]</td>
</tr>
</tbody>
</table>
<h4 id="其他">其他</h4><table>
<thead>
<tr>
<th>action</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>前进后退</td>
<td>ctrl + f/b (相当于左右方向键)</td>
</tr>
<tr>
<td>上一条命令</td>
<td>ctrl + p</td>
</tr>
<tr>
<td>搜索命令历史</td>
<td>ctrl + r</td>
</tr>
<tr>
<td>交换光标处文本</td>
<td>ctrl + t</td>
</tr>
<tr>
<td>清屏2</td>
<td>ctrl + l</td>
</tr>
<tr>
<td>查看历史命令</td>
<td>command + ;</td>
</tr>
<tr>
<td>查看剪贴板历史</td>
<td>command + shift + h</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="编辑">编辑</h4><table>
<thead>
<tr>
<th>action</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>到行首</td>
<td>ctrl + a</td>
</tr>
<tr>
<]]>
    </summary>
    
      <category term="快捷键" scheme="http://willnewii.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[seajs 资源]]></title>
    <link href="http://willnewii.github.io/20160416/seajs-%E8%B5%84%E6%BA%90/"/>
    <id>http://willnewii.github.io/20160416/seajs-资源/</id>
    <published>2016-04-16T03:57:32.000Z</published>
    <updated>2016-04-16T06:50:10.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD 模块定义规范</a></p>
</li>
<li><p><a href="https://github.com/seajs/seajs/issues/258" target="_blank" rel="external">模块标识</a></p>
</li>
<li><p><a href="https://github.com/seajs/seajs/issues/263" target="_blank" rel="external">Sea.js 的调试接口</a></p>
</li>
<li><p><a href="https://github.com/seajs/seajs/issues/262" target="_blank" rel="external">配置</a></p>
</li>
<li><p><a href="https://github.com/seajs/seajs/issues/971" target="_blank" rel="external">如何改造现有文件为 CMD 模块</a></p>
</li>
<li><p><a href="http://seajs.org/docs/#docs" target="_blank" rel="external">文档…</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD 模块定义规范</a></p>
</li>
<li><p><a href="http]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[android 开发问题]]></title>
    <link href="http://willnewii.github.io/20160331/android-%E9%97%AE%E9%A2%98/"/>
    <id>http://willnewii.github.io/20160331/android-问题/</id>
    <published>2016-03-31T04:12:55.000Z</published>
    <updated>2016-03-31T04:15:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="webview_切后台,再回来_无焦点(不弹软键盘)">webview 切后台,再回来 无焦点(不弹软键盘)</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (event.getAction ()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_DOWN :</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_UP :</span><br><span class="line">                        <span class="keyword">if</span> (!v.hasFocus()) &#123;</span><br><span class="line">                            v.setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">                            <span class="comment">//v.setFocusable(true);</span></span><br><span class="line">                            <span class="comment">//v.requestFocus ();</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="微信分享_提示_hit_push_hold！！！">微信分享 提示 hit push hold！！！</h4><p>原因是你分享的微信账号在其他手机登陆了，但是本机还没有退出登陆，导致没有权限分享。重新进入微信并登陆就好了。</p>
<h4 id="webview_error提示_net::ERR_CACHE_MISS">webview error提示 net::ERR_CACHE_MISS</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">19</span>) &#123;</span><br><span class="line"> 	mWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="webview_切后台,再回来_无焦点(不弹软键盘)">webview 切后台,再回来 无焦点(不弹软键盘)</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><spa]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[储倩 设计 作品]]></title>
    <link href="http://willnewii.github.io/20160314/%E5%80%A9%E5%80%A9Design/"/>
    <id>http://willnewii.github.io/20160314/倩倩Design/</id>
    <published>2016-03-14T04:23:12.000Z</published>
    <updated>2016-08-05T10:21:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="APP下载w">APP下载w</h3><h3 id="APP设计">APP设计</h3><ul>
<li><a href="https://modao.cc/app/Vz8GZZGNw4ohPxr10Z4w" target="_blank" rel="external">尼玛去哪儿之台湾</a></li>
<li><a href="https://modao.cc/app/yoalEe1zV2KCjlybyC0b" target="_blank" rel="external">好车贷</a></li>
<li><a href="https://modao.cc/app/fg8BDPcGugf051KhN6Wh15n0W7fyzW9" target="_blank" rel="external">MayDay歌词本2.0</a></li>
</ul>
<h3 id="icon设计">icon设计</h3><ul>
<li>中国风<br>  <img src="http://ww2.sinaimg.cn/large/6482edf0gw1f1wa02a5tlj20ku1vw4qp.jpg" alt="2"></li>
<li>简·净<br>  <img src="http://ww3.sinaimg.cn/large/6482edf0gw1f1w9zxvsrwj21732pg4eb.jpg" alt="3"></li>
</ul>
<h3 id="banner">banner</h3><p><img src="http://ww4.sinaimg.cn/large/6482edf0gw1f1wa09g2maj21cy3uyhdu.jpg" alt="1"></p>
<h3 id="手绘">手绘</h3><p><img src="http://ww3.sinaimg.cn/large/6482edf0gw1f1w9zza5lbj21kw1kw13w.jpg" alt="4"><br><img src="http://ww4.sinaimg.cn/large/6482edf0gw1f2cgqfv9w9j21ji1ji16h.jpg" alt="5"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="APP下载w">APP下载w</h3><h3 id="APP设计">APP设计</h3><ul>
<li><a href="https://modao.cc/app/Vz8GZZGNw4ohPxr10Z4w" target="_blank" rel="extern]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[持续集成 应用-1]]></title>
    <link href="http://willnewii.github.io/20160313/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E5%BA%94%E7%94%A81/"/>
    <id>http://willnewii.github.io/20160313/持续集成-应用1/</id>
    <published>2016-03-13T09:14:00.000Z</published>
    <updated>2016-03-14T06:50:34.000Z</updated>
    <content type="html"><![CDATA[<h4 id="引子">引子</h4><p>　　现在的工作环境,代码基本处于私有状态,利用起来的只有开发组.测试人员就算可以访问,也没有实质性的应用.打个包…连个真机看个log…你他妈不会么..<br>　　最近在看git工作流的相关应用,了解到持续集成方面的应用.恰好能解决这方面的问题.</p>
<h4 id="什么是持续集成">什么是持续集成</h4><p>　　持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。<br>　　高大上的答案,来自百度…</p>
<h4 id="说说工作上的场景">说说工作上的场景</h4><ul>
<li><p>啥时候发新包<br>在测试阶段,当进行一轮测试后,测试人员就要等着发新包.</p>
<ul>
<li>这是一个被动行为.如果开发人员不推进,测试人员将永远处于等待状态.(为什么测试人员不去搭建一个编译环境…)</li>
<li>大家都有一种”默契”,代码相关的产出物都应该由开发人员来搞.跟其他人没毛关系</li>
<li>理论上,只要代码库被更新,测试人员就可以进行新的测试,不需要等待开发人员的推进.</li>
</ul>
</li>
<li><p>驱动工作的是代码库<br>　　一直以来,大家习惯的工作流程是确认bug,修改bug,提交代码,编译新包,交付测试.这一切的行为需要开发人员驱动.<br>　　那么让我们试想一下,把这个流程由开发人员驱动,改为代码库驱动.<br>　　以持续集成的方式:当代码库发生变更,系统就要进行集成工作.自动化构建,产生新包,供测试人员测试.在这个过程中开发人员不需要与测试人员进行沟通,一切由代码库驱动.<br>　　(发散一下,我们使用的mantis,其实跟代码也没有关系.而github的issue,则是紧密围绕代码产生和关闭的.)</p>
</li>
</ul>
<h4 id="当前实现效果(使用jenkins构建android应用)">当前实现效果(使用jenkins构建android应用)</h4><p>　　当代码库更新后,相关人员进入jenkins后台,执行build操作即可.当build成功后,jenkins会发邮件通知相关工作人员任务状态.如果构建成功,测试人员下载新包,即可进行测试.<br>　　开发人员的工作是修复bug,提交代码.测试,上线,打渠道包的一系列构建任务都可以交给jenkins完成.</p>
<h4 id="TODO">TODO</h4><ul>
<li>通过hooks,当版本库发生变化,自动通知jenkins构建新版本</li>
<li>通过区分branch,可以实现构建不同版本的包.你爱测那个测那个…</li>
<li>自动化测试…</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="引子">引子</h4><p>　　现在的工作环境,代码基本处于私有状态,利用起来的只有开发组.测试人员就算可以访问,也没有实质性的应用.打个包…连个真机看个log…你他妈不会么..<br>　　最近在看git工作流的相关应用,了解到持续集成方面的应用.恰好能解决这方面]]>
    </summary>
    
      <category term="工作流程" scheme="http://willnewii.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git小结]]></title>
    <link href="http://willnewii.github.io/20160309/Git%E5%B0%8F%E7%BB%93/"/>
    <id>http://willnewii.github.io/20160309/Git小结/</id>
    <published>2016-03-09T07:27:00.000Z</published>
    <updated>2016-03-14T06:47:07.000Z</updated>
    <content type="html"><![CDATA[<h4 id="什么是版本控制">什么是版本控制</h4><p>　　版本控制透过文档控制（documentation control）记录程序各个模组的改动，并为每次改动编上序号。这种方法是工程图（engineering drawings）维护（maintenance）的标准做法， 它伴随着工程图从图的诞生一直到图的定型。 一种简单的版本控制形式，例如，赋给图的初版一个版本等级“A”。当做了第一次改变后，版本等级改为“B”，以此类推等等。</p>
<h4 id="什么是Git">什么是Git</h4><p>　　Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。</p>
<ul>
<li>集中式 分布式</li>
<li>代码库的每份拷贝都带有完整的数据库，用户可以在本地修改、提交代码</li>
<li>分支…分支…分支…重要的事情说三遍</li>
</ul>
<h3 id="为什么是git">为什么是git</h3><ul>
<li>google code关闭了…</li>
<li>github是全球最大的同性交友网站…</li>
<li>看看你使用的开源项目都托管在哪里?</li>
<li>分支…分支…分支…重要的事情说三遍</li>
</ul>
<h3 id="提交方式">提交方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">svn <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">'svn提交'</span> //加入版本库&amp;提交服务器</span><br><span class="line"></span><br><span class="line">git <span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">'git提交'</span> //加入本地版本库</span><br><span class="line">git push origin <span class="keyword">master</span> //提交到远程分支</span></span><br></pre></td></tr></table></figure>
<h3 id="branch">branch</h3><p>　　Git的分支相比SVN要轻量很多.Git的分支只是指针,并没有将仓库进行复制,每次提交都会让当前的分支向后移动,指向最后一次提交的对象.当你在切换分支时,Git也只是改变指向当前所在分支的特殊指针HEAD,所以可以快速地在各个分支之间进行切换.</p>
<p>　　简单、快速</p>
<h3 id="gitflow">gitflow</h3><p><img src="/img/gitflow.png" alt="GitHub Octocat"></p>
<h3 id="工作流程">工作流程</h3><ul>
<li>永久性分支<ul>
<li>master分支<br>存放的是随时可供在生产环境中部署的代码.当开发活动告一段落，产生了一份新的可供部署的代码时，master分支上的代码会被更新。同时,每一次更新,最好添加对应的版本号标签（TAG）。</li>
<li>develop分支<br>保存当前最新开发成果的分支。当develop分支上的代码已实现本次更新的所有功能，并通过了所有的测试后，且代码已经足够稳定时，就可以将所有的开发成果合并回master分支了</li>
</ul>
</li>
<li>临时性分支<ul>
<li>topic分支<br>修改bug,实验性,优化,更新控件</li>
<li>一对一<br>按模块分配任务.大家以dev分支为基础,创建各自私有分支（一对一）,进行开发.这个过程中是对其他人不可见,这样在开发过程中不会污染dev分支,出现dev分支不可用的状态.</li>
<li>一对多<br>如果有交叉任务,可以创建一个topic分支（多对一）,指定多名人员维护开发.</li>
</ul>
</li>
</ul>
<h3 id="持续集成">持续集成</h3><p><a href="http://10.101.26.196:8080/job/build-android/" target="_blank" rel="external">http://10.101.26.196:8080/job/build-android/</a></p>
<h3 id="rebase_衍合/变基">rebase 衍合/变基</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="command">log</span> <span class="comment">--pretty=oneline</span></span><br><span class="line">git rebase -i (你需要合并的commints的前一个commit哈希值)</span><br></pre></td></tr></table></figure>
<h3 id="其它">其它</h3><ul>
<li>git log</li>
<li>stash</li>
<li>markdown</li>
</ul>
<h4 id="资料">资料</h4><ul>
<li><p>基础知识</p>
<ul>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能看懂的git入门</a></li>
<li><a href="http://www.cnblogs.com/gbyukg/archive/2011/12/12/2285419.html" target="_blank" rel="external">git log 参数</a></li>
</ul>
</li>
<li><p>工作流</p>
<ul>
<li><a href="http://www.ituring.com.cn/article/56870" target="_blank" rel="external">基于git的源代码管理模型——git flow</a></li>
<li><a href="https://coding.net/help/doc/git/git-branch.html" target="_blank" rel="external">coding-Git分支管理</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83" target="_blank" rel="external">常见工作流比较</a></li>
</ul>
</li>
<li><p>进阶</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="external">Commit message和Change log编写指南</a></li>
<li><a href="http://blog.fir.im/fir-im-practicesguide4/" target="_blank" rel="external">http://blog.fir.im/fir-im-practicesguide4/</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="什么是版本控制">什么是版本控制</h4><p>　　版本控制透过文档控制（documentation control）记录程序各个模组的改动，并为每次改动编上序号。这种方法是工程图（engineering drawings）维护（maintenance）的标准做法]]>
    </summary>
    
      <category term="工作流程" scheme="http://willnewii.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6笔记]]></title>
    <link href="http://willnewii.github.io/20160215/ES6-%E8%B5%84%E6%BA%90/"/>
    <id>http://willnewii.github.io/20160215/ES6-资源/</id>
    <published>2016-02-15T02:47:00.000Z</published>
    <updated>2016-02-17T10:21:01.000Z</updated>
    <content type="html"><![CDATA[<h4 id="笔记">笔记</h4><ul>
<li>Arrow Function<br><br>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</li>
</ul>
<h4 id="教程">教程</h4><ul>
<li><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门 - 阮一峰的…</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000004365693" target="_blank" rel="external">30分钟掌握ES6/ES2015核心内容（上）</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000004368132" target="_blank" rel="external">30分钟掌握ES6/ES2015核心内容（下）</a></p>
</li>
<li><p><a href="http://base-n.github.io/koa-generator-examples/node4/classes.html" target="_blank" rel="external">一起学koa</a></p>
</li>
</ul>
<h4 id="hello_world">hello world</h4><ul>
<li><a href="https://segmentfault.com/a/1190000004394726?utm_source=APP&amp;utm_medium=iOS&amp;utm_campaign=socialShare" target="_blank" rel="external">使用ES6开发流程</a></li>
<li><a href="http://www.es6fiddle.net/" target="_blank" rel="external">运行es6代码的网站</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="笔记">笔记</h4><ul>
<li>Arrow Function<br><br>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的th]]>
    </summary>
    
      <category term="ES6" scheme="http://willnewii.github.io/tags/ES6/"/>
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git笔记]]></title>
    <link href="http://willnewii.github.io/20160120/git/"/>
    <id>http://willnewii.github.io/20160120/git/</id>
    <published>2016-01-20T03:47:00.000Z</published>
    <updated>2016-01-25T07:50:06.000Z</updated>
    <content type="html"><![CDATA[<h4 id="git移除某文件夹的版本控制">git移除某文件夹的版本控制</h4><p>thinkphp框架，Apps/Runtime下目录移出版本控制.<br>git rm -r -n –cached  <em>/Runtime/\</em>      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。</p>
<p>git rm -r –cached  <em>/Runtime/\</em>      //最终执行命令.</p>
<p>git commit -m”移除Runtime目录下所有文件的版本控制”    //提交</p>
<p>git push origin master   //提交到远程服务器</p>
<p>若用git status命令查看，则Apps/Runtime/目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和.git 同级目录下，新建一个.gitignore文件，<br>把.gitignore提交到远程服务器。 则.Apps/Runtime目录就不会被提交了。</p>
<h4 id="git_am">git am</h4><p>git am –abort</p>
<h4 id="git_flow">git flow</h4><p><a href="http://blog.jobbole.com/76867/" target="_blank" rel="external">http://blog.jobbole.com/76867/</a></p>
<h4 id="git_常用指令">git 常用指令</h4><p><a href="http://stormzhang.com/git/2014/01/27/git-common-command/" target="_blank" rel="external">http://stormzhang.com/git/2014/01/27/git-common-command/</a></p>
<h4 id="git_submodule的使用">git submodule的使用</h4><p><a href="http://www.stormzhang.com/git/2014/02/13/git-submodule/" target="_blank" rel="external">http://www.stormzhang.com/git/2014/02/13/git-submodule/</a></p>
<h4 id="git_文档">git 文档</h4><ul>
<li><p><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git 中文版(推荐)</a></p>
</li>
<li><p><a href="http://www.juvenxu.com/2010/11/28/a-successful-git-branching-model/" target="_blank" rel="external">一个成功的Git分支模型(推荐)</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">Git分支管理策略</a></p>
</li>
<li><p><a href="http://pic002.cnblogs.com/img/1-2-3/201007/2010072023345292.png" target="_blank" rel="external">Git 常用命令图</a></p>
</li>
<li><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git - 简明指南</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="git移除某文件夹的版本控制">git移除某文件夹的版本控制</h4><p>thinkphp框架，Apps/Runtime下目录移出版本控制.<br>git rm -r -n –cached  <em>/Runtime/\</em>      //-n：加上这个参]]>
    </summary>
    
      <category term="笔记" scheme="http://willnewii.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS笔记]]></title>
    <link href="http://willnewii.github.io/20160120/JS%E7%AC%94%E8%AE%B0/"/>
    <id>http://willnewii.github.io/20160120/JS笔记/</id>
    <published>2016-01-20T03:37:00.000Z</published>
    <updated>2016-07-19T02:51:17.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://www.jb51.net/article/55364.htm" target="_blank" rel="external">JS合并数组的几种方法及优劣比较</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/tianguook/archive/2010/09/30/1839648.html" target="_blank" rel="external">JS中数组的操作</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/onlys/articles/jQuery.html" target="_blank" rel="external">jQuery选择器总结</a><br>###比较</p>
<h4 id="1-===">1.===</h4><p>要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符：</p>
</li>
</ul>
<p>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
<p>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</p>
<p>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。</p>
<h4 id="2-NaN">2.NaN</h4><p>另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：</p>
<pre><code><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span>
</code></pre><p>唯一能判断NaN的方法是通过isNaN()函数：</p>
<pre><code><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span>
</code></pre><h4 id="3-浮点数的相等比较">3.浮点数的相等比较</h4><pre><code><span class="number">1</span> / <span class="number">3</span> === (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">// false</span>
</code></pre><p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p>
<pre><code>Math.<span class="built_in">abs</span>(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span>
</code></pre><p>####变量&amp;函数<br>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言</p>
<ol>
<li>如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量</li>
<li>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：</li>
<li>apply &amp; call</li>
<li>编写高阶函数，就是让函数的参数能够接收别的函数。</li>
</ol>
<p>#####闭包<br>我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p>
<p>返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p>
<p>在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。<br>在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。：</p>
<p>####严格模式</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<pre><code><span class="pi">'use strict'</span>;
</code></pre><p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>
<p>###复制数组<br>    var arr = [‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’, ‘G’];<br>    var aCopy = arr.slice();<br>    aCopy; // [‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’, ‘G’]<br>    aCopy === arr; // false</p>
<p>###Object<br>如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：</p>
<pre><code><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming; <span class="regexp">//</span> <span class="keyword">true</span>
</code></pre><p>要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：</p>
<pre><code>var xiaoming = {
    <span class="symbol">name:</span> <span class="string">'小明'</span>
};
xiaoming.hasOwnProperty(<span class="string">'name'</span>); <span class="regexp">//</span> <span class="keyword">true</span>
xiaoming.hasOwnProperty(<span class="string">'toString'</span>); <span class="regexp">//</span> <span class="keyword">false</span>
</code></pre><p>###判断<br>JavaScript把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true，因此上述代码条件判断的结果是true。            </p>
<p>###this<br>要保证this指向正确，必须用obj.xxx()的形式调用！</p>
<p>###对象<br>JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。</p>
<p>当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。</p>
<p>注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p><a href="http://www.jb51.net/article/55364.htm" target="_blank" rel="external">JS合并数组的几种方法及优劣比较</a></p>
</li>
<li><p><a href="ht]]>
    </summary>
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Charles]]></title>
    <link href="http://willnewii.github.io/20160113/Charles/"/>
    <id>http://willnewii.github.io/20160113/Charles/</id>
    <published>2016-01-13T06:51:00.000Z</published>
    <updated>2016-01-13T07:37:22.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>安装SSL证书 <a href="http://www.charlesproxy.com/ssl.zip" target="_blank" rel="external">链接</a></p>
</li>
<li><p><a href="http://www.tuicool.com/articles/UzIzIne" target="_blank" rel="external">使用Charles抓包并篡改返回数据</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>安装SSL证书 <a href="http://www.charlesproxy.com/ssl.zip" target="_blank" rel="external">链接</a></p>
</li>
<li><p><a href="http://www]]>
    </summary>
    
      <category term="软件" scheme="http://willnewii.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kindle & Calibre]]></title>
    <link href="http://willnewii.github.io/20160106/Kindle-Calibre/"/>
    <id>http://willnewii.github.io/20160106/Kindle-Calibre/</id>
    <published>2016-01-06T12:01:00.000Z</published>
    <updated>2016-01-13T06:50:39.000Z</updated>
    <content type="html"><![CDATA[<h4 id="编写Recipe">编写Recipe</h4><ol>
<li><p>html结构良好</p>
<p> 可根据Beautiful Soup提供的api,很容易就能找到你需要的相关节点.</p>
</li>
<li><p>html坏标签</p>
<p> 在解析新浪博客的时候出现了返回soup找不到子节点的问题</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = <span class="keyword">self</span>.index_to_soup(<span class="keyword">self</span>.url)</span><br><span class="line">divs = soup.findAll(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'module-categories module'</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> len(divs)</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个时候你可以打印一下soup的len.有可能就是html中有坏标签导致解析异常.所以bs只能当做String直接返回.这时你就只能靠正则,或者练练String操作的基本功啦😜,把你想要的内容截取出来.</p>
<h4 id="BasicNewsRecipe_变量">BasicNewsRecipe 变量</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>电子书标题</td>
</tr>
<tr>
<td>description</td>
<td>电子书描述</td>
</tr>
<tr>
<td>cover_url</td>
<td>电子书的封面图片  </td>
</tr>
<tr>
<td>url_prefix</td>
<td>这是我自用的属性，是内容页面的前缀，用于后面拼装内容页的完整url</td>
</tr>
<tr>
<td>no_stylesheets</td>
<td>不要使用页面CSS样式</td>
</tr>
<tr>
<td>auto_cleanup</td>
<td>开启该选项自动清理正文内容</td>
</tr>
<tr>
<td>keep_only_tags</td>
<td>有时自动解析出来的文章内容是不对的.你可以之前文章的正文范围.</td>
<td>[{ ‘class’: ‘hentry’ }]</td>
</tr>
<tr>
<td>delay</td>
<td>延迟下载？</td>
<td>没有验证</td>
</tr>
<tr>
<td>simultaneous_downloads</td>
<td>下载线程数</td>
<td>有些网站/blog可能对爬出做了限制,这样你就可以通过这两个参数做一些调整.</td>
</tr>
</tbody>
</table>
<h4 id="BasicNewsRecipe_函数">BasicNewsRecipe 函数</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>articles.reverse()</td>
<td>文章倒序，让其按照时间从前到后排列</td>
</tr>
</tbody>
</table>
<p>parse_index</p>
<h4 id="debug">debug</h4><ul>
<li>ebook-convert<ul>
<li>vv 显示更多的操作信息</li>
<li>test 仅下载两篇文章,并将html的内容输出在debug/input目录下</li>
</ul>
</li>
</ul>
<h4 id="资料">资料</h4><ol>
<li><p>BasicNewsRecipe 万物基础哇~</p>
<p> <a href="http://manual.calibre-ebook.com/news_recipe.html" target="_blank" rel="external">base_news_recipe API</a></p>
</li>
<li><p>示例</p>
<p> <a href="http://www.jianshu.com/p/aeb72b50c20b" target="_blank" rel="external">用calibre抓取乌云知识库并生成电子书</a></p>
<p> <a href="http://blog.codinglabs.org/articles/convert-html-to-kindle-book.html" target="_blank" rel="external">抓取网页内容生成Kindle电子书</a></p>
</li>
<li><p>API</p>
<p> <a href="http://www.crummy.com/software/BeautifulSoup/bs3/documentation.zh.html" target="_blank" rel="external">Beautiful Soup 中文文档</a></p>
<p> <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="external">Beautiful Soup 中文文档(这个阅读方便一些)</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="编写Recipe">编写Recipe</h4><ol>
<li><p>html结构良好</p>
<p> 可根据Beautiful Soup提供的api,很容易就能找到你需要的相关节点.</p>
</li>
<li><p>html坏标签</p>
<p> 在解析新浪博]]>
    </summary>
    
      <category term="软件" scheme="http://willnewii.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android dialog]]></title>
    <link href="http://willnewii.github.io/20160106/dialog-fox/"/>
    <id>http://willnewii.github.io/20160106/dialog-fox/</id>
    <published>2016-01-06T10:22:00.000Z</published>
    <updated>2016-07-19T02:52:37.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>dialog自定义View,弹出键盘</li>
</ol>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)<span class="comment">;</span></span><br><span class="line">imm.showSoftInput(et_dialog_confirmphoneguardpswd,InputMethodManager.SHOW_IMPLICIT)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>dialog 触发点击事件,不关闭</li>
</ol>
<p>是通过改变mShowing状态实现的,记得在其他地方修正状态.<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 是否可以关闭对话框</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> dialog</span><br><span class="line"> * <span class="doctag">@param</span> isCan</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">isCanDismiss</span><span class="params">(DialogInterface dialog, <span class="keyword">boolean</span> isCan)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Field field = dialog.getClass().getSuperclass().getDeclaredField(<span class="string">"mShowing"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(dialog, isCan);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>dialog自定义View,弹出键盘</li>
</ol>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span]]>
    </summary>
    
      <category term="Android" scheme="http://willnewii.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flex 布局]]></title>
    <link href="http://willnewii.github.io/20160105/Flex-%E5%B8%83%E5%B1%80/"/>
    <id>http://willnewii.github.io/20160105/Flex-布局/</id>
    <published>2016-01-05T04:17:00.000Z</published>
    <updated>2016-01-13T08:24:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="容器属性">容器属性</h3><ol>
<li><p>flex-direction</p>
<pre><code>属性决定主轴的方向（即项目的排列方向）。
</code></pre><ol>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。<blockquote>
<p>LinearLayout.orientation<br>horizontal-&gt;row,vertical-column</p>
</blockquote>
</li>
</ol>
</li>
<li><p>flex-wrap</p>
<pre><code>默认情况下，项目都排在一条线（又称<span class="string">"轴线"</span>）上。flex-<span class="operator">wrap</span>属性定义，如果一条轴线排不下，如何换行。
</code></pre><ol>
<li>nowrap（默认）：不换行。</li>
<li>wrap：换行，第一行在上方。</li>
<li>wrap-reverse：换行，第一行在下方。</li>
</ol>
</li>
<li><p>flex-flow</p>
<pre><code><span class="attribute">flex-flow</span>属性是<span class="attribute">flex-direction</span>属性和<span class="attribute">flex-wrap</span>属性的简写形式，默认值为row <span class="value">nowrap</span>。
</code></pre></li>
<li><p>justify-content</p>
<pre><code>属性定义了项目在主轴上的对齐方式。
</code></pre><ol>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ol>
</li>
<li><p>align-items</p>
<pre><code>属性定义项目在交叉轴上如何对齐。
</code></pre></li>
<li><p>align-content <strong>5，6没太明白区别在哪里</strong></p>
<pre><code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
</code></pre><blockquote>
<p>android:gravity </p>
</blockquote>
</li>
</ol>
<h3 id="项目属性">项目属性</h3><ol>
<li>order    default 0<pre><code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<span class="number">0</span>。
</code></pre></li>
<li><p>flex-grow    default 0</p>
<pre><code>属性定义项目的放大比例，默认为<span class="number">0</span>，即如果存在剩余空间，也不放大。
</code></pre><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<blockquote>
<p>LinearLayout.weight</p>
</blockquote>
</li>
<li><p>flex-shrink  default 1 </p>
<pre><code>属性定义了项目的缩小比例，默认为<span class="number">1</span>，即如果空间不足，该项目将缩小。
</code></pre><p> 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
</li>
<li><p>flex-basis</p>
<pre><code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<span class="keyword">auto</span>，即项目的本来大小。
</code></pre></li>
<li><p>flex default 0 1 auto</p>
<pre><code><span class="attribute">flex</span>属性是<span class="attribute">flex-grow</span>, <span class="attribute">flex-shrink</span> 和 <span class="attribute">flex-basis</span>的简写，默认值为0 1 <span class="attribute">auto</span>。后两个属性可选。
</code></pre></li>
<li><p>align-self</p>
<pre><code><span class="keyword">align</span>-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<span class="keyword">align</span>-items属性。默认值为<span class="keyword">auto</span>，表示继承父元素的<span class="keyword">align</span>-items属性，如果没有父元素，则等同于stretch。
</code></pre><blockquote>
<p>android:layout_gravity</p>
</blockquote>
</li>
</ol>
<h3 id="资料">资料</h3><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇</a><br><a href="http://philipwalton.github.io/solved-by-flexbox/" target="_blank" rel="external">solved-by-flexbox</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="容器属性">容器属性</h3><ol>
<li><p>flex-direction</p>
<pre><code>属性决定主轴的方向（即项目的排列方向）。
</code></pre><ol>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li]]>
    </summary>
    
      <category term="css" scheme="http://willnewii.github.io/tags/css/"/>
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
