<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>诗人的咸鱼</title>
  
  <subtitle>生活不止有眼前的苟且,还有诗和远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://willnewii.github.io/"/>
  <updated>2018-10-31T02:53:56.521Z</updated>
  <id>http://willnewii.github.io/</id>
  
  <author>
    <name>诗人的咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm completion</title>
    <link href="http://willnewii.github.io/20181031/npm-completion/"/>
    <id>http://willnewii.github.io/20181031/npm-completion/</id>
    <published>2018-10-31T02:47:36.000Z</published>
    <updated>2018-10-31T02:53:56.521Z</updated>
    
    <content type="html"><![CDATA[<h4 id="npm-completion"><a href="#npm-completion" class="headerlink" title="npm completion"></a><a href="https://docs.npmjs.com/cli/completion" target="_blank" rel="noopener">npm completion</a></h4><p>刚发现npm 有一个自动完成命令补全的功能</p><h4 id="npm-安装-git项目"><a href="#npm-安装-git项目" class="headerlink" title="npm 安装 git项目"></a>npm 安装 git项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i git+https://github.com/willnewii/vue-lib.git<span class="comment">#version</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;npm-completion&quot;&gt;&lt;a href=&quot;#npm-completion&quot; class=&quot;headerlink&quot; title=&quot;npm completion&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.npmjs.com/cli/completi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>-webkit-box-orient: vertical webpack无效</title>
    <link href="http://willnewii.github.io/20180614/webkit-box-orient-vertical-webpack%E6%97%A0%E6%95%88/"/>
    <id>http://willnewii.github.io/20180614/webkit-box-orient-vertical-webpack无效/</id>
    <published>2018-06-14T14:16:35.000Z</published>
    <updated>2018-06-14T14:18:24.567Z</updated>
    
    <content type="html"><![CDATA[<p>Vue项目,build以后,-webkit-box-orient: vertical 会消失.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">            cssProcessorOptions: &#123;</span><br><span class="line">                safe: <span class="literal">true</span>,</span><br><span class="line">                autoprefixer: <span class="literal">false</span>  &lt;== 添加改行</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue项目,build以后,-webkit-box-orient: vertical 会消失.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用 key 管理可复用的元素</title>
    <link href="http://willnewii.github.io/20180608/%E7%94%A8-key-%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://willnewii.github.io/20180608/用-key-管理可复用的元素/</id>
    <published>2018-06-08T03:01:08.000Z</published>
    <updated>2018-06-08T03:16:09.951Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>在开发中遇到了一个’奇怪’的问题.在页面中通过条件判断显示三个同样的组件.但是组件2和组件3无论如何都不发生改变.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"index === 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:data</span>=<span class="string">'1'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"index === 2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:data</span>=<span class="string">'2'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"index === 3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:data</span>=<span class="string">'3'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://cn.vuejs.org/v2/guide/conditional.html#%E7%94%A8-key-%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">用 key 管理可复用的元素</a></p><p>查找文档后发现该章节.原来在不特殊指明的情况下,vue会复用组件,此时又不触发created,而component组件的付值操作是在created中完成的.所以就会出现组件显示正常,但是内容不会变化的的情况.<br>而vue给出的方案是在不需要复用的组件上添加唯一key.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"index === 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:data</span>=<span class="string">'1'</span> <span class="attr">key</span>=<span class="string">'1'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"index === 2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:data</span>=<span class="string">'2'</span> <span class="attr">key</span>=<span class="string">'2'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"index === 3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:data</span>=<span class="string">'3'</span> <span class="attr">key</span>=<span class="string">'3'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h5&gt;&lt;p&gt;在开发中遇到了一个’奇怪’的问题.在页面中通过条件判断显示三个同样的组件.但是组件2和组件3无论如何都不发生改变.&lt;br&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Puppeteer 使用笔记</title>
    <link href="http://willnewii.github.io/20180123/Puppeteer-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://willnewii.github.io/20180123/Puppeteer-使用笔记/</id>
    <published>2018-01-23T09:27:22.000Z</published>
    <updated>2018-01-23T09:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Puppeteer？"><a href="#什么是Puppeteer？" class="headerlink" title="什么是Puppeteer？"></a>什么是Puppeteer？</h2><ul><li>是一个用户界面自动化工具</li><li>是一个Nodejs的库</li><li>是一个可以通过API来操作Chrome浏览器的库</li><li>是一个Chrome团队维护的库</li></ul><h2 id="Puppeteer可以做什么？"><a href="#Puppeteer可以做什么？" class="headerlink" title="Puppeteer可以做什么？"></a>Puppeteer可以做什么？</h2><ul><li>生成网页截图/PDF</li><li>抓取网页内容</li><li>抓取SPA网站内容<br>应该说,正常你通过chrome能做到的事,Puppeteer大概可以通过api来完成.</li></ul><h2 id="来点代码"><a href="#来点代码" class="headerlink" title="来点代码"></a>来点代码</h2><h3 id="截图或者保存pdf-一搜一大把的例子-你可以跳过"><a href="#截图或者保存pdf-一搜一大把的例子-你可以跳过" class="headerlink" title="截图或者保存pdf (一搜一大把的例子,你可以跳过.)"></a>截图或者保存pdf (一搜一大把的例子,你可以跳过.)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://github.com/GoogleChrome/puppeteer/blob/master/examples/screenshot-fullpage.js'</span>);</span><br><span class="line">    <span class="comment">//生成全屏截图</span></span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'full.png'</span>, <span class="attr">fullPage</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="comment">//生成pdf</span></span><br><span class="line">    <span class="keyword">await</span> page.pdf(&#123;<span class="attr">path</span>: <span class="string">'full.pdf'</span>&#125;);</span><br><span class="line">    <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="抓取网页数据"><a href="#抓取网页数据" class="headerlink" title="抓取网页数据"></a>抓取网页数据</h3><p>我们以京东商品详情页为例.通过puppeteer,获取商品标题和售价.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://item.m.jd.com/ware/view.action?wareId=3719293'</span>);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            jdPrice: <span class="built_in">document</span>.querySelector(<span class="string">'#jdPrice-copy'</span>).innerText,</span><br><span class="line">            jdTitle: <span class="built_in">document</span>.querySelector(<span class="string">'.title-text'</span>).innerText</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//log &#123; jdPrice: '998.00',jdTitle: '【新年货】荣耀 畅玩6X 4GB 32GB 全网通4G手机 高配版 冰河银' &#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="拦截相应内容"><a href="#拦截相应内容" class="headerlink" title="拦截相应内容"></a>拦截相应内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">await</span> page.on(<span class="string">'request'</span>, request =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.resourceType() === <span class="string">'image'</span>)</span><br><span class="line">        request.abort();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        request.continue();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//再打开的页面内图片请求就会被拦截了</span></span><br></pre></td></tr></table></figure><h3 id="处理响应内容"><a href="#处理响应内容" class="headerlink" title="处理响应内容"></a>处理响应内容</h3><p>有些页面数据是通过接口请求获取的.如果能直接处理接口返回数据,当然要比通过查询页面元素获取内容更方便和直接.<br>还拿jd商品详情页举例,通过分析得知有个版块,京东问答的数据是由接口返回,那么假设我们现在要获取当前商品问答数据.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理响应内容</span></span><br><span class="line"><span class="keyword">await</span> page.on(<span class="string">'response'</span>, <span class="keyword">async</span> response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.url().indexOf(<span class="string">'https://item.m.jd.com/question/questionList.json'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">await</span> response.text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;<span class="attr">headless</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开京东登录页面</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://passport.jd.com/new/login.aspx'</span>);</span><br><span class="line">    <span class="comment">//登录页默认为扫码登录,所以需要先点击账户登录tab</span></span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">'.login-tab.login-tab-r'</span>);</span><br><span class="line">    <span class="comment">//输入账户/密码</span></span><br><span class="line">    <span class="keyword">await</span> page.type(<span class="string">'#loginname'</span>, <span class="string">'我的用户名'</span>, &#123;<span class="attr">delay</span>: <span class="number">20</span>&#125;);</span><br><span class="line">    <span class="keyword">await</span> page.type(<span class="string">'#nloginpwd'</span>, <span class="string">'我的密码'</span>, &#123;<span class="attr">delay</span>: <span class="number">20</span>&#125;);</span><br><span class="line">    <span class="comment">//点击登录</span></span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">'.btn-img.btn-entry'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//await browser.close();</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Puppeteer？&quot;&gt;&lt;a href=&quot;#什么是Puppeteer？&quot; class=&quot;headerlink&quot; title=&quot;什么是Puppeteer？&quot;&gt;&lt;/a&gt;什么是Puppeteer？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个用户界面自动化工具&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue 中 extend / component / mixins / extends 的区别</title>
    <link href="http://willnewii.github.io/20170706/Vue-%E4%B8%AD-extend-component-mixins-extends-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://willnewii.github.io/20170706/Vue-中-extend-component-mixins-extends-的区别/</id>
    <published>2017-07-06T01:25:00.000Z</published>
    <updated>2017-08-02T01:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在segmentfault上看到了一个问题<a href="https://segmentfault.com/q/1010000007312426" target="_blank" rel="noopener">vue.extend, vue.component 区别</a>,突然有些方,好歹也写了几个小vue项目,自己都弄不清楚这些东西…</p><h3 id="new-Vue-、component"><a href="#new-Vue-、component" class="headerlink" title="new Vue()、component"></a>new Vue()、component</h3><p>首先我们来约定一个<strong>选项对象</strong>  baseOptions,后面的代码会用到.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            firstName: <span class="string">'Walter'</span>,</span><br><span class="line">            lastName: <span class="string">'White'</span>,</span><br><span class="line">            alias: <span class="string">'Heisenberg'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onCreated-1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="new-Vue-source-vue-src-core-instance-index-js"><a href="#new-Vue-source-vue-src-core-instance-index-js" class="headerlink" title="new Vue() source:vue/src/core/instance/index.js"></a><a href="http://cn.vuejs.org/v2/guide/instance.html" target="_blank" rel="noopener">new Vue()</a> <strong>source:vue/src/core/instance/index.js</strong></h4><blockquote><p>实例化一个组件.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(baseOptions);</span><br><span class="line"><span class="comment">// -&gt; onCreated-1</span></span><br></pre></td></tr></table></figure><h4 id="component-source-vue-src-core-global-api-assets-js"><a href="#component-source-vue-src-core-global-api-assets-js" class="headerlink" title="component source:vue/src/core/global-api/assets.js"></a><a href="http://cn.vuejs.org/v2/api/#Vue-component" target="_blank" rel="noopener">component</a> <strong>source:vue/src/core/global-api/assets.js</strong></h4><blockquote><p>Vue.component 是用来注册或获取全局组件的方法，其作用是将通过 Vue.extend 生成的扩展实例构造器注册（命名）为一个组件.全局注册的组件可以在所有晚于该组件注册语句构造的Vue实例中使用.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'global-component'</span>, Vue.extend(baseOptions));</span><br><span class="line"><span class="comment">//传入一个选项对象（自动调用 Vue.extend）,等价于上行代码.</span></span><br><span class="line">Vue.component(<span class="string">'global-component'</span>, baseOptions);</span><br><span class="line"><span class="comment">// 获取注册的组件（始终返回构造器）</span></span><br><span class="line"><span class="keyword">var</span> MyComponent = Vue.component(<span class="string">'my-component'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><hr><p>当我们需要在其他页面‘扩展’或者叫‘混合’baseOptions时,Vue中提供了多种的实现方式:extend,mixins,extends.</p><h4 id="extend-source-vue-src-core-global-api-extend-js"><a href="#extend-source-vue-src-core-global-api-extend-js" class="headerlink" title="extend source:vue/src/core/global-api/extend.js"></a><a href="http://cn.vuejs.org/v2/api/#Vue-extend" target="_blank" rel="noopener">extend</a> <strong>source:vue/src/core/global-api/extend.js</strong></h4><blockquote><p>可以扩展 Vue 构造器，从而用预定义选项创建可复用的组件构造器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> BaseComponent = Vue.extend(baseOptions);</span><br><span class="line"><span class="comment">//基于基础组件BaseComponent,再扩展新逻辑.</span></span><br><span class="line"><span class="keyword">new</span> BaseComponent(&#123;</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onCreated-2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他自定义逻辑</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// -&gt; onCreated-1</span></span><br><span class="line"><span class="comment">// -&gt; onCreated-2</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a><a href="http://cn.vuejs.org/v2/api/#mixins" target="_blank" rel="noopener">mixins</a></h4><blockquote><p>mixins 选项接受一个混合对象的数组。这些混合实例对象可以像正常的实例对象一样包含选项,他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    mixins: [baseOptions],</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onCreated-2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他自定义逻辑</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// -&gt; onCreated-1</span></span><br><span class="line"><span class="comment">// -&gt; onCreated-2</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a><a href="http://cn.vuejs.org/v2/api/#extends" target="_blank" rel="noopener">extends</a></h4><blockquote><p>这和 mixins 类似，区别在于，组件自身的选项会比要扩展的源组件具有更高的优先级.</p></blockquote><p>官方文档是这么写的,除了优先级,可能就剩下接受参数的类型吧,mixins接受的是数组.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    extends: baseOptions,</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onCreated-2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他自定义逻辑</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// -&gt; onCreated-1</span></span><br><span class="line"><span class="comment">// -&gt; onCreated-2</span></span><br></pre></td></tr></table></figure><p>从结果上看,三种方式都能实现需求,但是形式却有不同.</p><ul><li>Vue.extend<ul><li>Vue.extend只是创建一个构造器,他是为了创建可复用的组件.</li></ul></li><li>mixins,extends<ul><li>而mixins和extends是为了拓展组件.</li></ul></li></ul><p>从源码来看通过extend,extends和mixins三种方式接收的options,最终都是通过mergeOptions进行合并的.差异只是官方文档中提到的优先级不同extend &gt; extends &gt; mixins. 所以,如果是简单的扩展组件功能,三个方式都可以达到目的.</p><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQsjQ" alt="图片描述"></p><p>而这三种方式使用场景上细化的区分,目前我也蒙圈中…</p><p>//几种方式的不同示例:<br><a href="https://jsfiddle.net/willnewii/dzks1r4d/" target="_blank" rel="noopener">https://jsfiddle.net/willnewii/dzks1r4d/</a></p><h3 id="选项对象合并策略-Vue-config-optionMergeStrategies"><a href="#选项对象合并策略-Vue-config-optionMergeStrategies" class="headerlink" title="选项对象合并策略   Vue.config.optionMergeStrategies"></a>选项对象合并策略   <strong>Vue.config.optionMergeStrategies</strong></h3><p>上面提到的选项对象,是在mergeOptions中按照一定策略进行合并的.</p><p>打印Vue.config.optionMergeStrategies,你会看默认的optionMergeStrategies如下:<br><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQu03" alt="图片描述"></p><ul><li>mergeHook<ul><li>子组件和父组件的生命周期事件会合并在一个数组里。父组件在前，子组件在后。</li></ul></li><li>watch<ul><li>子组件和父组件的watchers会合并在一个数组里。父组件在前，子组件在后。</li></ul></li><li>mergeAssets(filters，components，directives)<ul><li>首先会在子组件里查找，如果没有，才会沿着原型链向上，找父组件中对应的属性。</li></ul></li><li>data 合并规则<ul><li>无重复的属性保留</li><li>同名覆盖</li><li>data中的对象也是相同规则,无重复的属性保留,同名覆盖</li></ul></li><li>props、methods、computed: 无重复保留,同名子组件覆盖父组件</li></ul><h5 id="mergeAssets"><a href="#mergeAssets" class="headerlink" title="mergeAssets"></a>mergeAssets</h5><p>mergeAssets合并方法里,用到了原型委托.他会先把父组件的属性放在创建的新对象的原型链上.然后扩展新对象</p><blockquote><p><strong>对象里查找属性的规则</strong> :举个例子，当查找一个属性时，如 obj[a] ,如果 obj 没有 a 这个属性，那么将会在 obj 对象的原型里找，如果还没有，在原型的原型上找，直到原型链的尽头，如果还没有找到，返回 undefined。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span> (<span class="params">to, _from</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _from) &#123;</span><br><span class="line">    to[key] = _from[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeAssets</span> (<span class="params">parentVal, childVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="built_in">Object</span>.create(parentVal || <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> childVal</span><br><span class="line">    ? extend(res, childVal)</span><br><span class="line">    : res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Vue.component 注册全局组件,为了方便</li><li>Vue.extend 创建组件的构造函数,为了复用</li><li>mixins、extends 为了扩展</li></ul><p>如果按照优先级去理解,当你需要继承一个组件时,可以使用Vue.extend().当你需要扩展组件功能的时候,可以使用extends,mixins.但目前为止还没有碰到完美诠释他们的场景,抱歉,能力有限😂 </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://mario.studio/vue-course/#/0?_k=chseqx" target="_blank" rel="noopener">Vue 代码详解</a></p></li><li><p><a href="http://www.qinshenxue.com/article/20170616121212.html" target="_blank" rel="noopener">Vue官方文档梳理-全局配置 合并策略</a></p></li><li><p><a href="https://segmentfault.com/a/1190000007087912#articleHeader4" target="_blank" rel="noopener">vue2.0源码解读之选项合并策略 optionMergeStrategies</a></p></li><li><a href="https://segmentfault.com/a/1190000009721209" target="_blank" rel="noopener">vue源码解读－component机制</a></li></ul><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ul><li><p>href 属性用于保持光标形状为正常的手形，也可以使用 css 实现</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> @<span class="attr">click</span>=<span class="string">"currentView = 'home'"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>FOUC Flash Of Unstyled Content 文档样式闪烁</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在segmentfault上看到了一个问题&lt;a href=&quot;https://segmentfault.com/q/1010000007312426&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue.extend, vue.component 区别&lt;/a
      
    
    </summary>
    
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue 首屏加载优化</title>
    <link href="http://willnewii.github.io/20170705/vue-%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://willnewii.github.io/20170705/vue-首屏加载优化/</id>
    <published>2017-07-05T01:11:00.000Z</published>
    <updated>2017-08-02T01:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="库使用情况"><a href="#库使用情况" class="headerlink" title="库使用情况"></a>库使用情况</h3><ul><li>vue</li><li>vue-router</li><li>axios</li><li>muse-ui</li><li>material-icons</li><li>vue-baidu-map</li></ul><h3 id="未优化前"><a href="#未优化前" class="headerlink" title="未优化前"></a>未优化前</h3><p>首先我们在正常情况下build<br><img src="http://obfmtiyt5.bkt.clouddn.com/img%2F3653690494-595b19a18af16_articlex" alt="图片描述"></p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="1-按需加载"><a href="#1-按需加载" class="headerlink" title="1. 按需加载"></a>1. 按需加载</h4><p>当前流行的UI框架如iview,muse-ui,Element UI都支持按需加载,只需稍微改动一下代码.</p><p>修改前：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MuseUI <span class="keyword">from</span> <span class="string">'muse-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'muse-ui/dist/muse-ui.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'muse-ui/dist/theme-light.css'</span></span><br><span class="line">Vue.use(MuseUI)</span><br></pre></td></tr></table></figure></p><p>修改后：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> appBar <span class="keyword">from</span> <span class="string">'muse-ui/src/appBar'</span></span><br><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">'muse-ui/src/toast'</span></span><br><span class="line"><span class="keyword">import</span> drawer <span class="keyword">from</span> <span class="string">'muse-ui/src/drawer'</span></span><br><span class="line"><span class="keyword">import</span> popup <span class="keyword">from</span> <span class="string">'muse-ui/src/popup'</span></span><br><span class="line"></span><br><span class="line">Vue.component(appBar.name, appBar);</span><br><span class="line">Vue.component(toast.name, toast);</span><br><span class="line">Vue.component(drawer.name, drawer);</span><br><span class="line">Vue.component(popup.name, popup);</span><br></pre></td></tr></table></figure></p><p>这里有点麻烦的就是你要把整个项目用到的muse-ui组件都注册一遍,当然你也可以只在用到的页面做局部引用.<br>让我们来看看使用按需加载后的效果🤓</p><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQh9B" alt="图片描述"></p><p>在当前项目引用了16个muse-ui组件的情况下 css减少了80kb,js减少了快200kb.</p><h4 id="2-基于DllPlugin-和-DllReferencePlugin-的-webpack-构建优化"><a href="#2-基于DllPlugin-和-DllReferencePlugin-的-webpack-构建优化" class="headerlink" title="2. 基于DllPlugin 和 DllReferencePlugin 的 webpack 构建优化"></a>2. 基于DllPlugin 和 DllReferencePlugin 的 webpack 构建优化</h4><p>这一步并没有对项目产出的文件进行什么优化.而是优化了构建速度.<br>DllPlugin 预编译模块.有点像android开发中的lib Module,或者iOS的framework.<br>我们可以对项目中用到的vue,vue-router,axios,muse-ui 这些固定的,基本不变动的模块进行预编译. 具体操作不在赘述,可以看一下<a href="http://blog.mayday5.me/20170615/%E5%9F%BA%E4%BA%8EDllPlugin-%E5%92%8C-DllReferencePlugin-%E7%9A%84-webpack-%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">这篇文章</a>,也是我写的,但是觉得自己没讲利索😂 .</p><p>看一下构建时间的结果对比:</p><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQikO" alt="图片描述"></p><p>before:38291ms<br>after :10089ms</p><p>项目中多了core.dll.css和core.dll.js 他们就是划分出来的固定的,基本不变的模块,所以只需要编译一次,以后引用就好.有点library的感觉.这样每次构建省去了构建固定模块的时间.  时间有38s降到了10s,如果你构建比较频繁,应该还是很有用的.</p><h4 id="3-异步组件-官方文档"><a href="#3-异步组件-官方文档" class="headerlink" title="3. 异步组件 官方文档"></a>3. 异步组件 <a href="https://cn.vuejs.org/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">官方文档</a></h4><p>官方文档是这么介绍的:</p><blockquote><p>在大型应用中，我们可能需要将应用拆分为多个小模块，按需从服务器下载。为了让事情更简单， Vue.js 允许将组件定义为一个工厂函数，动态地解析组件的定义。Vue.js 只在组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染。</p></blockquote><p>修改router</p><p>before：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">'./search.vue'</span></span><br><span class="line">&#123;</span><br><span class="line">            path: <span class="string">'/search'</span>,</span><br><span class="line">            name: <span class="string">'search'</span>,</span><br><span class="line">            component: search</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> search = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./search.vue'</span>], resolve);</span><br><span class="line">&#123;</span><br><span class="line">            path: <span class="string">'/search'</span>,</span><br><span class="line">            name: <span class="string">'search'</span>,</span><br><span class="line">            component: search</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体我们来看看改造后的效果:<br><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQipH" alt="图片描述"><br>因为我的项目目前只有7个页面,即使把页面都做成异步加载,效果并不是很’喜人’,整体缩小了30kb.</p><h4 id="4-优化组件加载时机"><a href="#4-优化组件加载时机" class="headerlink" title="4. 优化组件加载时机"></a>4. 优化组件加载时机</h4><p>再使用别人的组件时,上手教程都会提示让你在main.js里注册一下就好.当然这是最省事的办法.<br>但是根据项目情况,比如我的项目用到了vue-baidu-map.<br>如果你按照默认的加载方式,vue-baidu-map是会被打在vendor.js .但其实这个组件我只有某个二级页面才使用.所以让我们来调整一下加载位置看看.把注册的vue-baidu-map放在真正使用它的地方.</p><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQiuF" alt="图片描述"></p><p>这样,verdor.js 又小了56kb.因为首页根本用不到vue-baidu-map. 当然这样会带来一个问题:当多个页面使用vue-baidu-map,会出现多个页面重复打包.</p><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQixp" alt="图片描述"></p><p>怎么异步加载插件,这个我还没搞明白…</p><h4 id="5-webpack-bundle-analyzer"><a href="#5-webpack-bundle-analyzer" class="headerlink" title="5. webpack-bundle-analyzer"></a>5. webpack-bundle-analyzer</h4><p>webpack-bundle-analyzer是用来分析 Webpack 生成的包体组成并且以可视化的方式反馈给开发者的工具.你可以通过命令:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">run</span> build <span class="comment">--report</span></span><br></pre></td></tr></table></figure></p><p>来查看依赖关系.然后再根据具体情况划分代码块.效果图就是上面那张花里胡哨的图…它清楚的告诉你了打包时模块划分的情况.</p><h4 id="6-前后对比"><a href="#6-前后对比" class="headerlink" title="6. 前后对比:"></a>6. 前后对比:</h4><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQixp" alt="图片描述"></p><p><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQiuF" alt="图片描述"></p><p>638.7kb vs 286.2kb<br>这还是在未开启gzip的情况下.</p><p>新增一张开启gzip的截图,84.8kb,相对最后的优化结果286.2kb是70%的压缩比…哈哈<br><img src="http://obfmtiyt5.bkt.clouddn.com/img%2FbVQlGy" alt="图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>在使用ui库时,尽量使用按需加载方式.</li><li>异步加载,官方文档很详尽,改造起来也不难,可以试试</li><li>合理规划三方库的引用.这个听起来有点龟毛,’收益’可能也不是很高,不过是个调整方向</li><li>善用webpack-bundle-analyzer优化项目依赖</li><li>服务端开启 gzip压缩,谁用谁知道！</li></ol><p>如果你能看到这,十分感谢你赏脸听一个android开发bb前端开发🤗 .</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://segmentfault.com/r/1250000009352622?shareId=1210000009352623" target="_blank" rel="noopener">Vue SPA(单页应用)首屏优化实践</a></li><li><a href="https://segmentfault.com/a/1190000005969643" target="_blank" rel="noopener">Webpack的dll功能</a></li><li><a href="https://cn.vuejs.org/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">vue官方文档-异步组件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;库使用情况&quot;&gt;&lt;a href=&quot;#库使用情况&quot; class=&quot;headerlink&quot; title=&quot;库使用情况&quot;&gt;&lt;/a&gt;库使用情况&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vue&lt;/li&gt;
&lt;li&gt;vue-router&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;
&lt;li&gt;muse
      
    
    </summary>
    
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>基于DllPlugin 和 DllReferencePlugin 的 webpack 构建优化</title>
    <link href="http://willnewii.github.io/20170615/%E5%9F%BA%E4%BA%8EDllPlugin-%E5%92%8C-DllReferencePlugin-%E7%9A%84-webpack-%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/"/>
    <id>http://willnewii.github.io/20170615/基于DllPlugin-和-DllReferencePlugin-的-webpack-构建优化/</id>
    <published>2017-06-15T07:39:00.000Z</published>
    <updated>2017-08-02T01:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个基于vue-cli webpack2模板创建的项目.项目中使用到了vue+vue-router+axios+muse-ui+iview<br>现在构建一次需要的时间大概是40s左右.真心受不了.虽然在开发过程中,我们不太需要关心构建时间.但是如果在开发hybridApp时,构建的次数就会增多.</p><p>一般我们可以把项目分为三部分.</p><table><thead><tr><th>分类</th><th>说明</th><th>变动频率  </th></tr></thead><tbody><tr><td>vendor_library</td><td>核心库</td><td>低 </td></tr><tr><td>vendor</td><td>一般项目依赖</td><td>中等 </td></tr><tr><td>code</td><td>业务逻辑</td><td>高 </td></tr></tbody></table><p>vendor_library:比如vue,vue-router,axios 这些变动频率极低的文件可以利用 DllPlugin 和 DllReferencePlugin 进行预编译.</p><p>vendor,code在开发阶段,每次构建都需要编译.但是一旦完成该次开发任务,应该调整vendor 是否加入vendor_library.</p><h3 id="BundleAnalyzerPlugin-的插件使用"><a href="#BundleAnalyzerPlugin-的插件使用" class="headerlink" title="BundleAnalyzerPlugin 的插件使用"></a>BundleAnalyzerPlugin 的插件使用</h3><p>BundleAnalyzerPlugin 是分析 Webpack 生成的包体组成并且以可视化的方式反馈给开发者的插件。<br><img src="http://obfmtiyt5.bkt.clouddn.com/11111%2FAZfq2ar.gif" alt=""><br>vue已经默认集成了该插件. 如果你运行 npm run build –report.就能看到当前项目的依赖情况.然后做出相应调整.</p><h3 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h3><ol><li>按需加载<br>muse-ui,iview 都提供了按需加载的方式,按照文档调整即可.</li></ol><table><thead><tr><th>分类</th><th>耗时</th><th>muse-ui</th><th>iview </th></tr></thead><tbody><tr><td>before</td><td>13256ms</td><td>234KB</td><td>337KB </td></tr><tr><td>after</td><td>43211ms</td><td>79KB</td><td>75KB </td></tr></tbody></table><pre><code>先看结果...你没看错,&apos;优化后&apos;,时间竟然变长了...😂.不过这也正常,之前的依赖直接获取的是dist目录的文件,现在需要在src目录下获取.增加了编译的过程.</code></pre><p>但是文件大小的减少还是喜人的.当然,这取决于项目中对模块的使用程度.在我们这个项目中iview只使用了的四个控件.结果上看,显然还是按需加载比较划算.不过这个不算是时间上的优化,只是因为dll可以解决构建时间问题,使按需加载变的更好用.</p><ol start="2"><li>DllPlugin 和 DllReferencePlugin 预编译资源模块</li></ol><blockquote><p>Dll这个概念应该是借鉴了Windows系统的dll。一个dll包，就是一个纯纯的依赖库，它本身不能运行，是用来给你的app引用的。<br>打包dll的时候，Webpack会将所有包含的库做一个索引，写在一个manifest文件中，而引用dll的代码（dll user）在打包的时候，只需要读取这个manifest文件，就可以了。<br>这么一来有几个好处：<br>Dll打包以后是独立存在的，只要其包含的库没有增减、升级，hash也不会变化，因此线上的dll代码不需要随着版本发布频繁更新。<br>App部分代码修改后，只需要编译app部分的代码，dll部分，只要包含的库没有增减、升级，就不需要重新打包。这样也大大提高了每次编译的速度。<br>假设你有多个项目，使用了相同的一些依赖库，它们就可以共用一个dll。</p></blockquote><p>网上抄的… 其实意思就是我们可以把项目的公共模块,基本不会改动的模块.想我们刚才说的定义为vendor_library的内容,进行预编译编译.以后在项目构建过程中,vendor_library部分直接引用,就不需要再编译了.<br>这也是为什么按需加载可以得到更好的使用,正常构建流程,因为使用了按需加载,会导致每次的构建都比使用全量加载用时要长.而使用dll,核心库只需要编译一次,以后直接引用即可.</p><p>先来看一下改进结果：</p><table><thead><tr><th>分类</th><th style="text-align:center">耗时       </th></tr></thead><tbody><tr><td>before</td><td style="text-align:center">57192ms </td></tr><tr><td>after</td><td style="text-align:center">7890ms </td></tr></tbody></table><p>哈哈,有没有快到飞起！！！</p><h3 id="DllPlugin-和-DllReferencePlugin-使用"><a href="#DllPlugin-和-DllReferencePlugin-使用" class="headerlink" title="DllPlugin 和 DllReferencePlugin 使用"></a>DllPlugin 和 DllReferencePlugin 使用</h3><ol><li>新建webpack.dll.conf.js文件<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.dll.conf.js</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//vue项目默认有一个static目录.我就把导出目录放在了static/dll/目录下</span></span><br><span class="line"><span class="keyword">const</span> srcPath = path.join(__dirname, <span class="string">'../static/dll/'</span>);</span><br><span class="line"><span class="comment">//需要编译的模块</span></span><br><span class="line"><span class="keyword">const</span> vendors = [<span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">    <span class="string">'vue-router'</span>,</span><br><span class="line">    <span class="string">'vue-localstorage'</span>,</span><br><span class="line">    <span class="string">'material-design-icons/iconfont/material-icons.css'</span>,</span><br><span class="line">    <span class="string">'iview/dist/styles/iview.css'</span>,</span><br><span class="line">    <span class="string">'iview/src/components/tag/tag.vue'</span></span><br><span class="line">    <span class="string">'muse-ui/src/appBar'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">webpackConfig = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        vendor: vendors</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: vueLoaderConfig</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/iview.src.*?js$/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/muse-ui.src.*?js$/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                    use: <span class="string">"css-loader"</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff2?|eot|ttf|otf|svg)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    publicPath: <span class="string">'./'</span>,</span><br><span class="line">                    limit: <span class="number">1000</span>,</span><br><span class="line">                    name: <span class="string">'fonts/[name].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: srcPath, <span class="comment">// 输出的路径</span></span><br><span class="line">        filename: <span class="string">'[name].dll.js'</span>, <span class="comment">// 输出的文件，将会根据entry命名为vendor.dll.js</span></span><br><span class="line">        library: <span class="string">'[name]_library'</span> <span class="comment">// 暴露出的全局变量名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].dll.css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">            cssProcessorOptions: &#123;</span><br><span class="line">                safe: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123; <span class="comment">// uglifjs压缩</span></span><br><span class="line">            compress: &#123;</span><br><span class="line">                warnings: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            path: path.join(srcPath, <span class="string">'[name]-mainfest.json'</span>), <span class="comment">// 描述依赖对应关系的json文件</span></span><br><span class="line">            name: <span class="string">'[name]_library'</span>,</span><br><span class="line">            context: __dirname <span class="comment">// 执行的上下文环境，对之后DllReferencePlugin有用</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.npm_config_report) &#123;</span><br><span class="line">    <span class="keyword">var</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin</span><br><span class="line">    webpackConfig.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig;</span><br></pre></td></tr></table></figure></li></ol><p>其实这就是一个正常的构建文件.根据你的项目进行修改即可.唯一不同的是在plugins多了一个DllPlugin.他会生成一个描述依赖对应关系的json文件.</p><p>static目录如下:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">____dll</span></span><br><span class="line">|<span class="string"> </span>|____fonts</span><br><span class="line">|<span class="string"> </span>|<span class="string">____vendor-mainfest.json</span></span><br><span class="line">|<span class="string"> </span>|<span class="string">____vendor.dll.css</span></span><br><span class="line">|<span class="string"> </span>|<span class="string">____vendor.dll.js</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>修改模板index.html  根据你的构建结果做修改.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//head 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./static/dll/vendor.dll.css"</span>&gt;</span></span><br><span class="line">//body 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./static/dll/vendor.dll.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改webpack.base.conf.js</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: <span class="meta">[</span></span><br><span class="line">        <span class="params">...</span>,</span><br><span class="line">        <span class="literal">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">            context: __dirname,</span><br><span class="line">            manifest: <span class="keyword">require</span>(<span class="string">'../static/dll/vendor-mainfest.json'</span>) <span class="comment">// 指向生成的json文件</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="meta">]</span></span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --config ./build/webpack<span class="selector-class">.dll</span><span class="selector-class">.conf</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure></li></ol><p>你也可以将该语句放入npm run 中.’build:dll:report’ 是为了优化dll依赖关系,添加的另外一条命令.上文已经提过,我们可以借用BundleAnalyzerPlugin插件查看当前包的依赖情况,和包体组成情况.<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"build:dll"</span>: <span class="string">"webpack --config ./build/webpack.dll.conf.js"</span>,</span><br><span class="line">    <span class="string">"build:dll:report"</span>: <span class="string">"npm run build:dll --report"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>npm run build …看看这次的构建时间吧 😁</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个基于vue-cli webpack2模板创建的项目.项目中使用到了vue+vue-router+axios+muse-ui+iview&lt;br&gt;现在构建一次需要的时间大概是40s左右.真心受不了.虽然在开发过程中,我们不太需要关心构建时间.但是如果在开发hybridApp
      
    
    </summary>
    
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>awesome-chrome</title>
    <link href="http://willnewii.github.io/20170415/awesome-chrome/"/>
    <id>http://willnewii.github.io/20170415/awesome-chrome/</id>
    <published>2017-04-15T13:14:00.000Z</published>
    <updated>2017-04-15T13:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="扩展工具"><a href="#扩展工具" class="headerlink" title="扩展工具"></a>扩展工具</h4><h5 id="装机必备"><a href="#装机必备" class="headerlink" title="装机必备"></a>装机必备</h5><ul><li><p><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Adblock Plus</a><br>可用于在网页浏览时过滤视频网站广告、弹出窗口、网页横幅广告和其他显眼位置广告。润物细无声的插件.装上了你也不知道他是干嘛的…直到我用别人的电脑浏览网页,那满屏的广告…</p></li><li><p><a href="https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">crxMouse Chrome Gestures</a><br>鼠标手势,装机必备(<em>^__^</em>)</p></li><li><p><a href="https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">simple undo close</a><br>这个简单的弹出可让您轻而易举的撤销关闭的标签！</p></li><li><p><a href="https://chrome.google.com/webstore/detail/neater-bookmarks/ofgjggbjanlhbgaemjbkiegeebmccifi?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Neater Bookmarks</a><br>弹出式书签栏.装机必备.个人习惯会把默认的书签栏隐藏.</p></li></ul><h5 id="不必备"><a href="#不必备" class="headerlink" title="不必备"></a>不必备</h5><ul><li><p><a href="https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">the-great-suspender</a><br>节省内存利器。它可以休眠掉那些你暂时不用的 Chrome 标签，从而释放出更多的内存和资源</p></li><li><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">tampermonkey</a><br>一款用户脚本管理器，可以通过挂载 js 脚本以实现某些页面功能。你可以在 GreasyFork、 OpenUserJS 等脚本资源网站下载你需要的脚本，来丰富你的浏览器访问的网站功能。比如解决百度云大文件下载限制、跳过网站等待验证码及登录、令 Google 直接链接至搜索结果网页，无须重定向等。</p></li><li><p><a href="https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">stylish</a><br>tampermonkey是让你可以在指定的网站运行js,这个就是让你运行自定义的样式.比如,去掉百度首页的干扰元素,新浪微薄的广告等</p></li><li><p><a href="https://chrome.google.com/webstore/detail/anything-to-qrcode/calkaljlpglgogjfcidhlmmlgjnpmnmf?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">anything-to-qrcode</a><br>通过右键菜单或地址栏按钮将当前页面地址、选中的文本、链接、图片地址等文本内容生成二维码，也可以解析页面中的二维码图片，完全离线可用，不依赖任何远程文件和服务，内存占用小，不常驻后台，界面简洁。</p></li><li><p><a href="https://chrome.google.com/webstore/detail/bookmark-manager/gmlllbghnfkpflemihljekbapjopfjik?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Bookmark Manager</a><br>Google出品,material design风格书签管理器.据说本来是要替代自带的书签管理器.后来又被换回去了.个人觉得还好,主要是好看！~</p></li><li><p><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Vimium</a><br>用vim的快捷键操作浏览器,基本上不用摸鼠标了…</p></li><li><p><a href="https://chrome.google.com/webstore/detail/reader-view/iibolhpkjjmoepndefdmdlmbpfhlgjpl?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">阅读模式</a><br>提供与Safari阅读模式功能一致的插件，浏览文章页时候可进入友好的阅读模式，并自定义阅读功能。  如果你经常浏览资讯或者看长文章,强烈推荐！</p></li><li><p><a href="https://chrome.google.com/webstore/detail/send-to-kindle-by-klipme/ipkfnchcgalnafehpglfbommidgmalan?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Send to Kindle (by Klip.me)</a><br>炒鸡方便.可以设置你的多看或者kindle推送邮箱.看到喜欢的文章点一下,发送.</p></li></ul><h5 id="开发向"><a href="#开发向" class="headerlink" title="开发向"></a>开发向</h5><ul><li><p><a href="https://www.baidufe.com/fehelper" target="_blank" rel="noopener">WEB前端助手</a></p><ul><li>字符串编解码（Unicode/UTF8/Base64/MD5）<ul><li>二维码生成器（支持当前页面生成QrCode）</li><li>时间(戳)转换（Unix戳与本地时间的互转）</li><li>代码美化工具（HTML/CSS/JS/XML/SQL）</li><li>代码压缩工具（HTML/CSS/JS）</li><li>Json串格式化（粘贴文本、手动格式化）</li><li>页面取色工具（滑动鼠标随意取色）</li><li>Js正则表达式（正则测试、常用正则列表）</li><li>图片Base64（任意图片转DataURI格式）</li><li>编码规范检测（HTML/CSS/JS规范检测）</li><li>页面性能检测（页面响应时间、Header监测）</li></ul></li></ul></li><li><p><a href="https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">JSON-handle</a><br>对JSON格式的内容进行浏览和编辑，以树形图样式展现JSON文档，并可实时编辑。</p></li><li><p><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Octotree</a><br>查看代码的时候如果目录很深你需要一个一个点.这个插件会在左边直接生成一个树状文件目录.还可以直接下载单个文件.    </p></li></ul><h4 id="dev-tool"><a href="#dev-tool" class="headerlink" title="dev tool"></a>dev tool</h4><p><a href="http://www.w3cplus.com/tools/dev-tips.html" target="_blank" rel="noopener">Chorme 35个开发者工具的小技巧</a></p><p><a href="https://github.com/zhangyaowu/CN-Chrome-DevTools/blob/master/md/Performance-Profiling/Performance-profiling-with-the-Timeline.md" target="_blank" rel="noopener">Chrome 开发者工具中文手册</a></p><p><a href="http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles" target="_blank" rel="noopener">使用Chrome DevTools的Timeline和Profiles提高Web应用程序的性能</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;扩展工具&quot;&gt;&lt;a href=&quot;#扩展工具&quot; class=&quot;headerlink&quot; title=&quot;扩展工具&quot;&gt;&lt;/a&gt;扩展工具&lt;/h4&gt;&lt;h5 id=&quot;装机必备&quot;&gt;&lt;a href=&quot;#装机必备&quot; class=&quot;headerlink&quot; title=&quot;装机必备&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="杂记" scheme="http://willnewii.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>awesome-github</title>
    <link href="http://willnewii.github.io/20170406/awesome-github/"/>
    <id>http://willnewii.github.io/20170406/awesome-github/</id>
    <published>2017-04-06T03:19:00.000Z</published>
    <updated>2017-04-27T01:52:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul><li><p><a href="https://github.com/spetacular/bannedwords" target="_blank" rel="noopener">违禁词</a></p></li><li><p><a href="https://github.com/nowgoo/dict" target="_blank" rel="noopener">词库工具，用来从一段文本中找出存在于词库的词语</a></p></li><li><p><a href="https://github.com/amueller/word_cloud" target="_blank" rel="noopener">生成word_cloud</a></p><ul><li><img src="https://github.com/amueller/word_cloud/raw/master/examples/constitution.png" alt="word_cloud.jpg"></li></ul></li><li><p><a href="https://github.com/wandergis/coordtransform" target="_blank" rel="noopener">一个提供了百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具模块。</a></p></li></ul><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><ul><li><a href="https://github.com/serbanghita/Mobile-Detect" target="_blank" rel="noopener">根据User-Agent检测移动设备的库-Mobile-Detect</a></li></ul><h3 id="js-amp-css"><a href="#js-amp-css" class="headerlink" title="js&amp;css"></a>js&amp;css</h3><ul><li><p><a href="https://github.com/olistic/warriorjs" target="_blank" rel="noopener">一个学习js和人工智能的游戏</a></p></li><li><p><a href="https://github.com/webkul/csspin" target="_blank" rel="noopener">css 小菊花</a></p><ul><li><a href="https://webkul.github.io/csspin/" target="_blank" rel="noopener">demo</a></li></ul></li><li><p><a href="https://github.com/imochen/hotcss" target="_blank" rel="noopener">(适配)移动端布局终极解决方案 — 让移动端布局开发更加容易</a></p></li><li><p><a href="https://github.com/VincentGarreau/particles.js" target="_blank" rel="noopener">粒子特效</a></p><ul><li><img src="https://camo.githubusercontent.com/cdc9e740f0c04b77449e476c91e6f7770a6af6e7/687474703a2f2f76696e63656e74676172726561752e636f6d2f7061727469636c65732e6a732f6173736574732f696d672f6769746875622d73637265656e2e6a7067" alt="word_cloud.jpg">    </li></ul></li><li><p><a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener">动画库-anime</a></p></li><li><p><a href="https://github.com/parkjs814/AlgorithmVisualizer" target="_blank" rel="noopener">一个算法可视化工具,方便理解、检查算法运算过程-AlgorithmVisualizer</a></p><ul><li><img src="https://camo.githubusercontent.com/1d2e3b7d06c18d8e4e49d34cf06622b5d405b01a/687474703a2f2f692e67697068792e636f6d2f336f3645684a46677379536858364d48654d2e676966" alt="word_cloud.jpg">  </li></ul></li><li><p><a href="https://github.com/mycolorway/simditor" target="_blank" rel="noopener">一个所见即所得的编辑器</a></p></li></ul><h3 id="android"><a href="#android" class="headerlink" title="android"></a>android</h3><ul><li><p><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="noopener">工具类代码</a></p></li><li><p><a href="https://github.com/Jasonchenlijian/FastBle" target="_blank" rel="noopener">蓝牙快速开发框架，使用回调方式处理：scan、connect、notify、indicate、write、read等一系列蓝牙操作。-FastBle</a></p><ul><li><img src="https://github.com/Jasonchenlijian/FastBle/raw/master/preview/ble2.png" alt="word_cloud.jpg"></li></ul></li><li><p><a href="https://github.com/google/flexbox-layout" target="_blank" rel="noopener">谷歌出的… flexbox-layout</a></p></li><li><p><a href="https://github.com/BolexLiu/PressScanCode" target="_blank" rel="noopener">一个长按扫描 View 上的二维码的工具库。webView 也可以。</a></p><ul><li><ul><li><img src="https://github.com/BolexLiu/PressScanCode/raw/master/tips.gif" alt="word_cloud.jpg"></li></ul></li></ul></li><li><p><a href="https://github.com/drakeet/MultiType" target="_blank" rel="noopener">Android 复杂的列表视图新写法</a></p></li><li><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter 阿里出的一个路由</a></p></li><li><p><a href="https://github.com/andremion/Louvre" target="_blank" rel="noopener">图片选取-Louvre</a></p><ul><li><img src="https://raw.githubusercontent.com/andremion/Louvre/master/art/sample.gif" alt="word_cloud.jpg">    </li></ul></li><li><p><a href="https://github.com/donglua/PhotoPicker" target="_blank" rel="noopener">图片选取-PhotoPicker</a></p></li><li><p><a href="https://github.com/FinalTeam/RxGalleryFinal" target="_blank" rel="noopener">图片选取-RxGalleryFinal(Android图片单选/多选、拍照、裁剪、压缩。视频选择和录制。)</a></p></li><li><p><a href="https://github.com/Yalantis/uCrop" target="_blank" rel="noopener">图片剪切-uCrop</a></p><ul><li><img src="https://github.com/Yalantis/uCrop/raw/master/preview.gif" alt="word_cloud.jpg">  </li></ul></li><li><p><a href="https://github.com/bingoogolapple/BGABanner-Android" target="_blank" rel="noopener">导航条-BGABanner-Android</a></p><ul><li><img src="https://cloud.githubusercontent.com/assets/8949716/17557718/dc235ec4-5f4a-11e6-92b7-144a2a1a1e3f.gif" alt=""></li></ul></li><li><p><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="noopener">高斯模糊效果-Blurry</a></p><ul><li><img src="https://github.com/wasabeef/Blurry/raw/master/art/blurry.gif" alt=""></li></ul></li><li><p><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">lottie-android</a></p><ul><li><a href="http://www.jianshu.com/p/9a2136ecbc7b" target="_blank" rel="noopener">Lottie开源动画库介绍与使用示例</a></li></ul></li><li><p><a href="https://github.com/airbnb/epoxy" target="_blank" rel="noopener">epoxy</a></p><ul><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/1209/6838.html" target="_blank" rel="noopener">Epoxy: Airbnb的安卓视图架构</a></li></ul></li><li><p><a href="https://github.com/wenmingvs/NotifyUtil" target="_blank" rel="noopener">提供多达8种最常见的App通知接口,支持Android 5.0悬浮式通知样式-NotifyUtil</a></p><ul><li><img src="https://camo.githubusercontent.com/41d696a579065eb8f234a00485387947655d12a0/687474703a2f2f7777332e73696e61696d672e636e2f6c617267652f3639316363313531677731663037373476737937786732306463306b307836702e676966" alt=""></li></ul></li><li><p><a href="https://github.com/jiahuanyu/CircleTimerView/" target="_blank" rel="noopener">圆形时间控件</a></p><ul><li><img src="https://github.com/jiahuanyu/CircleTimerView/blob/master/images/sample.gif" alt=""></li></ul></li></ul><h3 id="weixin"><a href="#weixin" class="headerlink" title="weixin"></a>weixin</h3><ul><li><p><a href="https://github.com/Urinx/WeixinBot" target="_blank" rel="noopener">WeixinBot</a></p></li><li><p><a href="https://github.com/Chatie/wechaty" target="_blank" rel="noopener">wechaty</a></p></li></ul><h3 id="raspberry"><a href="#raspberry" class="headerlink" title="raspberry"></a>raspberry</h3><ul><li><a href="https://github.com/doublebind/raspi" target="_blank" rel="noopener">WebIOPi-0.7.1 Patch for Raspberry B+, Pi2, and Pi3.webiopi默认是不支持pi3 的40pin.</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tool&quot;&gt;&lt;a href=&quot;#Tool&quot; class=&quot;headerlink&quot; title=&quot;Tool&quot;&gt;&lt;/a&gt;Tool&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/spetacular/bannedwords&quot; t
      
    
    </summary>
    
    
      <category term="杂记" scheme="http://willnewii.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>树莓派与homebridge  (三)  插件篇</title>
    <link href="http://willnewii.github.io/20170105/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8Ehomebridge-%E4%B8%89-%E6%8F%92%E4%BB%B6%E7%AF%87/"/>
    <id>http://willnewii.github.io/20170105/树莓派与homebridge-三-插件篇/</id>
    <published>2017-01-05T10:11:00.000Z</published>
    <updated>2017-01-05T10:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="电器开关控制-homebridge-gpio-wpi"><a href="#电器开关控制-homebridge-gpio-wpi" class="headerlink" title="电器开关控制-homebridge-gpio-wpi"></a>电器开关控制-homebridge-gpio-wpi</h4><ol><li>更新或安装 <a href="http://wiringpi.com/download-and-install/" target="_blank" rel="noopener">wiringPi</a></li><li><p>安装 安装过程中会报一堆错误,不过貌似不影响安装.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g homebridge-gpio-wpi</span><br></pre></td></tr></table></figure></li><li><p>修改homebridge的config文件</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"accessories"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"accessory"</span>: <span class="string">"GPIO"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"GPIO2"</span>,        //设备名称</span><br><span class="line">      <span class="string">"pin"</span>: <span class="number">27</span>,              //对应的针脚号 (<span class="name">BCM</span>)</span><br><span class="line">      <span class="string">"duration"</span>: <span class="number">4000</span>,   </span><br><span class="line">      <span class="string">"inverted"</span>: <span class="string">"false"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>duration 节点应该删除,不然会报错.<a href="https://github.com/rsg98/homebridge-gpio-wpi/issues/1" target="_blank" rel="noopener">issue#1</a></p><ol start="4"><li><p>set-gpio.sh</p></li><li><p>code</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpio <span class="keyword">export</span> <span class="number">4</span> <span class="keyword">out</span></span><br><span class="line">homebridge</span><br></pre></td></tr></table></figure></li></ol><h4 id="温度-湿度检测-homebridge-dht-sensor"><a href="#温度-湿度检测-homebridge-dht-sensor" class="headerlink" title="温度,湿度检测-homebridge-dht-sensor"></a>温度,湿度检测-<a href="https://www.npmjs.com/package/homebridge-dht-sensor" target="_blank" rel="noopener">homebridge-dht-sensor</a></h4><ul><li>支持设备:DHT11或DHT22</li><li>需要先安装<a href="http://www.airspayce.com/mikem/bcm2835/" target="_blank" rel="noopener">bcm2835</a></li></ul><p>具体操作可以看<a href="https://www.npmjs.com/package/node-dht-sensor" target="_blank" rel="noopener">node-dht-sensor</a>的README.</p><h4 id="针脚图"><a href="#针脚图" class="headerlink" title="针脚图"></a>针脚图</h4><p>针脚图 安装过wiringpi 你可以通过命令’gpio readall’打印出来<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">+-----+-----+---------+------+---+---Pi 2---+---+------+---------+-----+-----+</span><br><span class="line"> |<span class="string"> BCM </span>|<span class="string"> wPi </span>|<span class="string">   Name  </span>|<span class="string"> Mode </span>|<span class="string"> V </span>|<span class="string"> Physical </span>|<span class="string"> V </span>|<span class="string"> Mode </span>|<span class="string"> Name    </span>|<span class="string"> wPi </span>|<span class="string"> BCM </span>|</span><br><span class="line"> +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+</span><br><span class="line"> |<span class="string">     </span>|<span class="string">     </span>|<span class="string">    3.3v </span>|<span class="string">      </span>|<span class="string">   </span>|<span class="string">  1 </span>||<span class="string"> 2  </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 5v      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">   2 </span>|<span class="string">   8 </span>|<span class="string">   SDA.1 </span>|<span class="string">   IN </span>|<span class="string"> 1 </span>|<span class="string">  3 </span>||<span class="string"> 4  </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 5V      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">   3 </span>|<span class="string">   9 </span>|<span class="string">   SCL.1 </span>|<span class="string">   IN </span>|<span class="string"> 1 </span>|<span class="string">  5 </span>||<span class="string"> 6  </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 0v      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">   4 </span>|<span class="string">   7 </span>|<span class="string"> GPIO. 7 </span>|<span class="string">  OUT </span>|<span class="string"> 1 </span>|<span class="string">  7 </span>||<span class="string"> 8  </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> TxD     </span>|<span class="string"> 15  </span>|<span class="string"> 14  </span>|</span><br><span class="line"> |<span class="string">     </span>|<span class="string">     </span>|<span class="string">      0v </span>|<span class="string">      </span>|<span class="string">   </span>|<span class="string">  9 </span>||<span class="string"> 10 </span>|<span class="string"> 1 </span>|<span class="string"> IN   </span>|<span class="string"> RxD     </span>|<span class="string"> 16  </span>|<span class="string"> 15  </span>|</span><br><span class="line"> |<span class="string">  17 </span>|<span class="string">   0 </span>|<span class="string"> GPIO. 0 </span>|<span class="string">  OUT </span>|<span class="string"> 0 </span>|<span class="string"> 11 </span>||<span class="string"> 12 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO. 1 </span>|<span class="string"> 1   </span>|<span class="string"> 18  </span>|</span><br><span class="line"> |<span class="string">  27 </span>|<span class="string">   2 </span>|<span class="string"> GPIO. 2 </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 13 </span>||<span class="string"> 14 </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 0v      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">  22 </span>|<span class="string">   3 </span>|<span class="string"> GPIO. 3 </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 15 </span>||<span class="string"> 16 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO. 4 </span>|<span class="string"> 4   </span>|<span class="string"> 23  </span>|</span><br><span class="line"> |<span class="string">     </span>|<span class="string">     </span>|<span class="string">    3.3v </span>|<span class="string">      </span>|<span class="string">   </span>|<span class="string"> 17 </span>||<span class="string"> 18 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO. 5 </span>|<span class="string"> 5   </span>|<span class="string"> 24  </span>|</span><br><span class="line"> |<span class="string">  10 </span>|<span class="string">  12 </span>|<span class="string">    MOSI </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 19 </span>||<span class="string"> 20 </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 0v      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">   9 </span>|<span class="string">  13 </span>|<span class="string">    MISO </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 21 </span>||<span class="string"> 22 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO. 6 </span>|<span class="string"> 6   </span>|<span class="string"> 25  </span>|</span><br><span class="line"> |<span class="string">  11 </span>|<span class="string">  14 </span>|<span class="string">    SCLK </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 23 </span>||<span class="string"> 24 </span>|<span class="string"> 1 </span>|<span class="string"> IN   </span>|<span class="string"> CE0     </span>|<span class="string"> 10  </span>|<span class="string"> 8   </span>|</span><br><span class="line"> |<span class="string">     </span>|<span class="string">     </span>|<span class="string">      0v </span>|<span class="string">      </span>|<span class="string">   </span>|<span class="string"> 25 </span>||<span class="string"> 26 </span>|<span class="string"> 0 </span>|<span class="string"> OUT  </span>|<span class="string"> CE1     </span>|<span class="string"> 11  </span>|<span class="string"> 7   </span>|</span><br><span class="line"> |<span class="string">   0 </span>|<span class="string">  30 </span>|<span class="string">   SDA.0 </span>|<span class="string">   IN </span>|<span class="string"> 1 </span>|<span class="string"> 27 </span>||<span class="string"> 28 </span>|<span class="string"> 1 </span>|<span class="string"> IN   </span>|<span class="string"> SCL.0   </span>|<span class="string"> 31  </span>|<span class="string"> 1   </span>|</span><br><span class="line"> |<span class="string">   5 </span>|<span class="string">  21 </span>|<span class="string"> GPIO.21 </span>|<span class="string">   IN </span>|<span class="string"> 1 </span>|<span class="string"> 29 </span>||<span class="string"> 30 </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 0v      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">   6 </span>|<span class="string">  22 </span>|<span class="string"> GPIO.22 </span>|<span class="string">   IN </span>|<span class="string"> 1 </span>|<span class="string"> 31 </span>||<span class="string"> 32 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO.26 </span>|<span class="string"> 26  </span>|<span class="string"> 12  </span>|</span><br><span class="line"> |<span class="string">  13 </span>|<span class="string">  23 </span>|<span class="string"> GPIO.23 </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 33 </span>||<span class="string"> 34 </span>|<span class="string">   </span>|<span class="string">      </span>|<span class="string"> 0v      </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line"> |<span class="string">  19 </span>|<span class="string">  24 </span>|<span class="string"> GPIO.24 </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 35 </span>||<span class="string"> 36 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO.27 </span>|<span class="string"> 27  </span>|<span class="string"> 16  </span>|</span><br><span class="line"> |<span class="string">  26 </span>|<span class="string">  25 </span>|<span class="string"> GPIO.25 </span>|<span class="string">   IN </span>|<span class="string"> 0 </span>|<span class="string"> 37 </span>||<span class="string"> 38 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO.28 </span>|<span class="string"> 28  </span>|<span class="string"> 20  </span>|</span><br><span class="line"> |<span class="string">     </span>|<span class="string">     </span>|<span class="string">      0v </span>|<span class="string">      </span>|<span class="string">   </span>|<span class="string"> 39 </span>||<span class="string"> 40 </span>|<span class="string"> 0 </span>|<span class="string"> IN   </span>|<span class="string"> GPIO.29 </span>|<span class="string"> 29  </span>|<span class="string"> 21  </span>|</span><br><span class="line"> +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+</span><br><span class="line"> |<span class="string"> BCM </span>|<span class="string"> wPi </span>|<span class="string">   Name  </span>|<span class="string"> Mode </span>|<span class="string"> V </span>|<span class="string"> Physical </span>|<span class="string"> V </span>|<span class="string"> Mode </span>|<span class="string"> Name    </span>|<span class="string"> wPi </span>|<span class="string"> BCM </span>|</span><br><span class="line"> +-----+-----+---------+------+---+---Pi 2---+---+------+---------+-----+-----+</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;电器开关控制-homebridge-gpio-wpi&quot;&gt;&lt;a href=&quot;#电器开关控制-homebridge-gpio-wpi&quot; class=&quot;headerlink&quot; title=&quot;电器开关控制-homebridge-gpio-wpi&quot;&gt;&lt;/a&gt;电器开关控制-h
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://willnewii.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>树莓派与homebridge  (二)  安装篇</title>
    <link href="http://willnewii.github.io/20161229/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8Ehomebridge-%E4%BA%8C-%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    <id>http://willnewii.github.io/20161229/树莓派与homebridge-二-安装篇/</id>
    <published>2016-12-29T08:24:00.000Z</published>
    <updated>2016-12-29T08:29:55.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">硬件信息:</span><br><span class="line">树莓派<span class="selector-tag">3</span></span><br><span class="line"><span class="selector-tag">Linux</span> <span class="selector-tag">raspberrypi</span> <span class="selector-tag">4</span><span class="selector-class">.4</span><span class="selector-class">.38-v7</span>+ <span class="selector-id">#938</span> <span class="selector-tag">SMP</span> <span class="selector-tag">Thu</span> <span class="selector-tag">Dec</span> <span class="selector-tag">15</span> <span class="selector-tag">15</span><span class="selector-pseudo">:22</span><span class="selector-pseudo">:21</span> <span class="selector-tag">GMT</span> <span class="selector-tag">2016</span> <span class="selector-tag">armv7l</span> <span class="selector-tag">GNU</span>/<span class="selector-tag">Linux</span></span><br></pre></td></tr></table></figure><h4 id="homebridge-安装"><a href="#homebridge-安装" class="headerlink" title="homebridge 安装"></a>homebridge 安装</h4><ol><li><p>安装git 和 make</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install git make</span><br></pre></td></tr></table></figure></li><li><p>安装Node</p><ul><li><p>方法1(下载链接可能已经变动,需要去官网查看)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v4.<span class="number">3.2</span>/<span class="keyword">node</span><span class="title">-v4</span>.<span class="number">3.2</span>-linux-armv6l.tar.gz </span><br><span class="line">tar -xvf <span class="keyword">node</span><span class="title">-v4</span>.<span class="number">3.2</span>-linux-armv6l.tar.gz </span><br><span class="line">cd <span class="keyword">node</span><span class="title">-v4</span>.<span class="number">3.2</span>-linux-armv6l</span><br><span class="line">Copy to /usr/local</span><br><span class="line">sudo cp -R * /usr/local/</span><br></pre></td></tr></table></figure></li><li><p>方法2(这种更简单….)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL http<span class="variable">s:</span>//<span class="keyword">deb</span>.nodesource.<span class="keyword">com</span>/setup_6.<span class="keyword">x</span> | sudo -E bash -</span><br><span class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> nodejs</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装Avahi</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libavahi-compat-libdnssd-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></li><li><p>安装homebridge和依赖</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g --unsafe-perm homebridge hap-nodejs node-gyp</span><br><span class="line">cd /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">node_modules</span>/<span class="title">homebridge</span>/</span></span><br><span class="line">sudo npm install --unsafe-perm bignum</span><br><span class="line">cd /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">node_modules</span>/<span class="title">hap</span>-<span class="title">nodejs</span>/<span class="title">node_modules</span>/<span class="title">mdns</span></span></span><br><span class="line">sudo node-gyp BUILDTYPE=Release rebuild</span><br></pre></td></tr></table></figure></li><li><p>Run</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">homebridge</span></span><br></pre></td></tr></table></figure></li></ol><p>至此,虽然树莓派还没有连接上什么实质性设备,但是打开系统是iOS10以上的设备,应该能看到一个叫homebridge的模块.连接试试看~<br>这样,第一步就算完成了.</p><h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><ul><li><p>启动的时候会有这些WARNING.作者已经说了,不影响使用,可以忽略.但是呢赶巧在办公室的时候手机死活发现不了设备.折腾了半天,后来回家,换了个wifi就好了…</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*** <span class="literal">WARNING</span> *** The program <span class="symbol">'nodejs</span>' uses the Apple Bonjour compatibility layer <span class="keyword">of</span> Avahi</span><br><span class="line">*** <span class="literal">WARNING</span> *** Please fix your application <span class="keyword">to</span> <span class="keyword">use</span> the native API <span class="keyword">of</span> Avahi!</span><br><span class="line">*** <span class="literal">WARNING</span> *** <span class="keyword">For</span> more information see http://<span class="number">0</span>pointerde/avahi-compat?s=libdns_sd&amp;e=nodejs</span><br><span class="line">*** <span class="literal">WARNING</span> *** The program <span class="symbol">'nodejs</span>' called <span class="symbol">'DNSServiceRegister</span>()' which <span class="keyword">is</span> <span class="keyword">not</span> supported (<span class="keyword">or</span> only supported partially) <span class="keyword">in</span> the Apple Bonjour compatibility layer <span class="keyword">of</span> Avahi</span><br><span class="line">*** <span class="literal">WARNING</span> *** Please fix your application <span class="keyword">to</span> <span class="keyword">use</span> the native API <span class="keyword">of</span> Avahi!</span><br><span class="line">*** <span class="literal">WARNING</span> *** <span class="keyword">For</span> more information see http://<span class="number">0</span>pointerde/avahi-compat?s=libdns_sd&amp;e=nodejs&amp;f=DNSServiceRegister</span><br></pre></td></tr></table></figure></li><li><p>Error: dns_sd.DNSServiceRegister dns service error: unknown #613 .运行后有可能会报这个错误.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install </span>avahi-daemon avahi-<span class="keyword">discover </span>libnss-mdns libavahi-compat-libdnssd-dev</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ul><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul><li><a href="https://github.com/nfarina/homebridge/issues/784" target="_blank" rel="noopener">How to create a custom accessory ? #784</a></li><li><a href="https://github.com/KhaosT/HAP-NodeJS/blob/095fddad93255b091768c7117c4fa9928c2cf83f/accessories/TemperatureSensor_accessory.js" target="_blank" rel="noopener">TemperatureSensor_accessory.js</a></li><li><a href="https://github.com/lagunacomputer/homebridge-CurrentAmbientLightLevel/blob/master/index.js" target="_blank" rel="noopener">CurrentAmbientLightLevel</a></li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://support.apple.com/zh-cn/HT207057" target="_blank" rel="noopener">自动化和远程访问 HomeKit 配件</a></li><li><p><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=151457" target="_blank" rel="noopener">upgrade 与 dist-upgrade 区别</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>和 apt-<span class="builtin-name">get</span> dist-upgrade 本质上是没有什么不同的。</span><br><span class="line">只不过，dist-upgrade 会识别出当依赖关系改变的情形并作出处理，而upgrade对此情形不处理。</span><br><span class="line">例如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而<span class="built_in"> upgrade </span>会认为依赖关系改变而拒绝升级 a 软件包。</span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.apple.com/reference/homekit/hmaccessorycategory/2315143-accessory_category_types" target="_blank" rel="noopener">accessory_category_types</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://willnewii.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>树莓派与homebridge  (一)  什么是HomeKit</title>
    <link href="http://willnewii.github.io/20161229/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8Ehomebridge-%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AFHomeKit/"/>
    <id>http://willnewii.github.io/20161229/树莓派与homebridge-一-什么是HomeKit/</id>
    <published>2016-12-29T08:21:00.000Z</published>
    <updated>2016-12-29T08:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是HomeKit"><a href="#什么是HomeKit" class="headerlink" title="什么是HomeKit"></a>什么是HomeKit</h3><p>HomeKit是苹果在2014年推出的智能家居平台.<br>然后没有然后了…我在网上找了半天也没有通俗定义homekit的话.个人理解就是一个苹果指定的智能家居标准.  </p><p><strong>直到今年的iOS10. HomeKit 才变得不那么抽象,因为他有了新的入口,‘家庭’app.</strong></p><h3 id="什么是家庭-App"><a href="#什么是家庭-App" class="headerlink" title="什么是家庭 App"></a>什么是家庭 App</h3><p>今年iOS更新以后,有没有发现手机里多了一个跟Watch/视频 一样“没用”的app 叫 家庭.<br>来看看官方的定义</p><ul><li>通过家庭 app，你就可以通过喜爱的 iOS 设备，安心掌控各种 HomeKit 配件。比如：用 iPhone 关灯，从 iPad 上看看门口是谁。家庭 app 能让你所有连接的设备，更高效、智能地为你工作。</li><li>只需轻轻一点，各个房间就能被你一手掌控。家庭 app 会按照房间将配件分组，你可以根据它们在家中的位置轻松操控。你甚至可以对 Siri 说“关掉客厅的灯”或是“打开楼上的空调”。通过<br>3D Touch，按住一个图标，就能执行调暗灯光或是调节恒温器之类更复杂的任务。</li></ul><p>简单来说,你可以通过家庭这个app.控制你家里的电器.比如:<br><img src="http://obfmtiyt5.bkt.clouddn.com/iOS_-_Home_-_Apple__%E4%B8%AD%E5%9B%BD_.jpg" alt=""></p><p>目前我能想到的使用场景:</p><ul><li>照明 -&gt; 这个就不用说了,冬天下床关灯的痛苦,你肯定知道的.最近家里在装修,有一个走廊灯,装的有点别扭,如果可以用手机控制,应该就不用纠结啦.</li><li>窗帘/ 这个我挺喜欢,睡觉的时候自己拉上,白天自己打开.</li><li>加湿器,风扇,空气净化器 -&gt; 配合各种感应器,根据屋内实时状态,自动开启或关闭</li><li>摄像头 -&gt; 我理解就是个网络摄像头.具体有什么联动的玩法,目前还不得而知.</li><li>插头 -&gt; 再也不用在离开家没多久的路上,纠结那个电源我到底拔没拔</li></ul><hr><ul><li>车库门 -&gt; 没车…我猜应该和窗帘类似的使用场景吧.不过首先你要有辆车,其次还要有个带车库…带车库…带车库…的房子！！！(好了,醒醒吧少年,你就当没见过这行)</li><li>门锁/防盗系统 因为不是从业者,对这类安全程度还是有疑虑,不在讨论范围之内.</li></ul><h3 id="HomeKit-Home-App-远程控制"><a href="#HomeKit-Home-App-远程控制" class="headerlink" title="HomeKit + Home App + 远程控制"></a>HomeKit + Home App + 远程控制</h3><p>再来看一张图<br><img src="http://obfmtiyt5.bkt.clouddn.com/iOS_-_Home_-_Apple__%E4%B8%AD%E5%9B%BD_%202.jpg" alt=""><br>在以后,iPhone会成为你房子的遥控器.</p><p>再来看一张图<br><img src="http://obfmtiyt5.bkt.clouddn.com/iOS_-_Home_-_Apple__%E4%B8%AD%E5%9B%BD_%203.jpg" alt=""><br>这应该是个装逼利器吧… 对这siri说,把灯关了…他就给关了.</p><p>PS:苹果还可以通过一个常驻家中的设备(装有 tvOS 10 的 Apple TV（第 4 代）或者装有 iOS 10 的 iPad),作为家居中枢。这样你就可以通过自己的手机远程控制家里的设备了.当然,这些目前看起来更像是痒点,还不是痛点.</p><p>而这些只需要一点点配置.苹果都会为你准备好.我不是果粉…但不得不说,在这个墙内,你要有逼格,你要有生态,还要有体验,还要有足够智能.好像苹果是上佳的选择.(小米的没有体验过,所以就不说是唯一啦)</p><p>如果你是土豪,后面的不用看了.去苹果官网选官方配件吧…</p><h3 id="树莓派-amp-HomeBridge"><a href="#树莓派-amp-HomeBridge" class="headerlink" title="树莓派&amp;HomeBridge"></a>树莓派&amp;HomeBridge</h3><p>Homebridge是一个轻量级NodeJS服务器。可以在您的家庭网络上运行,模拟iOS HomeKit API。它支持插件,为数以千计的模块提供了一个从HomeKit到各种第三方’智能家居’设备制造商的桥梁.</p><p>小米就可以通过它,来接入到homekit中.</p><p>而安装了HomeBridge的树莓派,在配合树莓派的GPIO能力,就能玩出很多花样.</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://baike.baidu.com/link?url=SXmlnQYkFiZz72-7Z_GEXmtnf7ZXZCnG0k-PQmI2mzDxGJcq_r1Ma_0R6XyWW_bPdtVd1GkekbJcdcCjgwexbXQH7HYmFdH5ZdO5sW3cpnu" target="_blank" rel="noopener">百度百科-HomeKit</a></li><li><a href="http://www.apple.com/cn/ios/home/" target="_blank" rel="noopener">Apple-Home App</a></li><li><a href="https://support.apple.com/zh-cn/HT207057" target="_blank" rel="noopener">Apple-自动化和远程访问 HomeKit 配件</a></li><li><a href="https://support.apple.com/zh-cn/HT204903" target="_blank" rel="noopener">Apple-查找兼容 Apple HomeKit 的配件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是HomeKit&quot;&gt;&lt;a href=&quot;#什么是HomeKit&quot; class=&quot;headerlink&quot; title=&quot;什么是HomeKit&quot;&gt;&lt;/a&gt;什么是HomeKit&lt;/h3&gt;&lt;p&gt;HomeKit是苹果在2014年推出的智能家居平台.&lt;br&gt;然后没有然后了…
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://willnewii.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>vimium 快捷键</title>
    <link href="http://willnewii.github.io/20161207/imium-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://willnewii.github.io/20161207/imium-快捷键/</id>
    <published>2016-12-07T07:30:00.000Z</published>
    <updated>2016-12-19T09:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="滚动操作"><a href="#滚动操作" class="headerlink" title="滚动操作"></a>滚动操作</h4><table><thead><tr><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>j</td><td>向下细微滚动窗口</td></tr><tr><td>k</td><td>向上细微滚动窗口</td></tr><tr><td>d</td><td>向下滚动半个屏幕 </td></tr><tr><td>u</td><td>向上移动半个屏幕</td></tr><tr><td>g+g(连续按两下g</td><td>回到顶部</td></tr><tr><td>G</td><td>到达页面底部</td></tr><tr><td>f</td><td>将当前网页上的所有可见链接/输入框分配一个快捷键，输入后就可以打开或者跳转到对应的输入框。如果按的是F，那么将在新窗口中打开页面</td></tr></tbody></table><h4 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h4><table><thead><tr><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>J</td><td>下一个标签页 </td></tr><tr><td>K</td><td>上一个标签页</td></tr><tr><td>x</td><td>关闭当前页面 </td></tr><tr><td>X</td><td>恢复刚刚关闭的页面</td></tr><tr><td>H</td><td>后退 </td></tr><tr><td>L</td><td>前进</td></tr><tr><td>r</td><td>刷新</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;滚动操作&quot;&gt;&lt;a href=&quot;#滚动操作&quot; class=&quot;headerlink&quot; title=&quot;滚动操作&quot;&gt;&lt;/a&gt;滚动操作&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbo
      
    
    </summary>
    
    
      <category term="cheatsheet" scheme="http://willnewii.github.io/tags/cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>intellij IDEA 快捷键</title>
    <link href="http://willnewii.github.io/20161202/intellij%20IDEA%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://willnewii.github.io/20161202/intellij IDEA 快捷键/</id>
    <published>2016-12-02T07:03:00.000Z</published>
    <updated>2016-12-19T10:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="js-忽略相关目录"><a href="#js-忽略相关目录" class="headerlink" title="js:忽略相关目录"></a>js:忽略相关目录</h4><p>在搜索方法的时候,有时候会把dist目录里的方法显示出来.可以在preferences-&gt;Directories 里把不相关的目录过滤掉(excluded).</p><h4 id="查看改行代码的修改记录"><a href="#查看改行代码的修改记录" class="headerlink" title="查看改行代码的修改记录"></a>查看改行代码的修改记录</h4><p>移动到行号位置,右键选择annotate.</p><h4 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h4><p>alt+cmd+v  变量抽取<br>alt+cmd+f  成员变量抽取<br>alt+cmd+m  方法   抽取</p><h4 id="函数重构Refactor"><a href="#函数重构Refactor" class="headerlink" title="函数重构Refactor"></a>函数重构Refactor</h4><h4 id="让主先行"><a href="#让主先行" class="headerlink" title="让主先行"></a>让主先行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写你关心的,再写动词</span></span><br><span class="line"> <span class="string">"hello"</span>.sout</span><br><span class="line"> <span class="string">"hello"</span>.return</span><br><span class="line"> name<span class="selector-class">.null</span> <span class="comment">//判断name==null</span></span><br><span class="line"> name<span class="selector-class">.nn</span>   <span class="comment">//判断name!=null</span></span><br><span class="line"> count<span class="selector-class">.for</span><span class="comment">//for循环</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>快捷键</th><th>位置</th></tr></thead><tbody><tr><td>跳转到父类</td><td>cmd+u</td><td>Navigate-&gt;Super method</td></tr><tr><td>跳转到定义</td><td>cmd+b</td><td>Navigate-&gt;declaration</td></tr><tr><td>跳转到实现</td><td>cmd+alt+b</td><td>Navigate-&gt;implementation(s)</td></tr><tr><td>返回</td><td>cmd+[</td><td>Navigate-&gt;Back</td></tr><tr><td>显示文件路径</td><td>alt+cmd+F12</td><td>Navigate-&gt;File Path</td><td>不用再目录里右键Reveal in Finder</td></tr><tr><td>double shift</td><td></td><td>search Everywhere</td></tr><tr><td>code</td><td></td></tr><tr><td>增强选择-扩大</td><td></td><td>Edit-&gt;extend selection</td></tr><tr><td>增强选择-收缩</td><td></td><td>Edit-&gt;shrink selection</td></tr><tr><td>显示参数信息</td><td>cmd+p</td><td>View-&gt;Paramaeter Info</td></tr><tr><td>提取</td><td></td><td></td></tr><tr><td>变量提取</td><td>alt+cmd+v</td><td>Refactor-&gt;Extract-&gt;Variable</td></tr><tr><td>方法提取</td><td>alt+cmd+m</td><td>Refactor-&gt;Extract-&gt;Method</td></tr><tr><td>移动</td><td></td></tr><tr><td>单词移动</td><td>alt</td></tr><tr><td>行尾首</td><td>cmd</td></tr></tbody></table><p><strong>add:2016-12-02</strong></p><h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><table><thead><tr><th>名称</th><th>action</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>复制当前行</td><td>duplicate Line or block</td><td>cmd+d</td><td></td></tr><tr><td>删除当前行</td><td>delete line</td><td>cmd+backspace</td><td></td></tr><tr><td>上下移动当前行</td><td>move line up/down</td><td>alt+shift+up/down</td><td></td></tr><tr><td>移动到指定行</td><td>Line</td><td>cmd+g</td><td></td></tr><tr><td>多文本选择</td><td>add selection for next occurrence</td><td>Ctrl+G</td><td></td></tr><tr><td>列选择</td><td></td><td>Alt+MouseDrag</td><td></td></tr><tr><td>当前文件方法列表</td><td>File Structure</td><td>cmd+F12</td><td></td></tr><tr><td>合并行和文字</td><td>join lines</td><td>ctrl+shift+j</td><td></td></tr><tr><td>代码提示</td><td>basic</td><td>ctrl+/</td><td>记得按tab…</td></tr><tr><td>显示文件路径</td><td>File Path</td><td>alt+cmd+F12</td><td>不用再目录里右键Reveal in Finder</td></tr><tr><td>路径中查找</td><td>Find in Path</td><td>shift+ctrl+F</td><td>有个预览功能,屌</td></tr><tr><td>方法调用路径</td><td></td><td>ctrl+alt+h</td><td></td></tr><tr><td>显示参数信息</td><td>Parameter Info</td><td>cmd+p</td><td>显示方法需要的参数</td></tr><tr><td>打开文件</td><td>class</td><td>cmd+o</td><td></td></tr><tr><td>重写方法列表</td><td>override method</td><td>cmd+n</td><td></td></tr><tr><td>快速查看定义</td><td>quick definition</td><td>cmd+shift+i</td><td></td></tr><tr><td>扩大/收缩选中部分</td><td>Collapse</td><td>cmd+ -/+</td><td></td></tr><tr><td>大小写转换</td><td>Unshelve</td><td>cmd+shift+u</td><td></td></tr></tbody></table><a id="more"></a><h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><table><thead><tr><th>名称</th><th>action</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>最近打开的文件</td><td>Recent Files</td><td>cmd+e</td><td></td></tr><tr><td>最近编辑的文件</td><td>Recently Changed Files</td><td>cmd+shift+e</td><td></td></tr><tr><td>显示使用的地方</td><td>Find Usage</td><td>alt+F7 cmd+alt+F7</td><td></td></tr><tr><td>跳到声明</td><td>declaration</td><td>cmd+b</td><td></td></tr><tr><td>跳到实现</td><td>implementation</td><td>cmd+alt+b</td><td></td></tr><tr><td>跳到类型声明</td><td>Type declaration</td><td>cmd+shift+b</td><td></td></tr><tr><td>跳到父类</td><td>Super Method</td><td>cmd+u</td><td></td></tr></tbody></table><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><table><thead><tr><th>名称</th><th>action</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>格式化代码</td><td>Reformat Code</td><td>cmd+alt+l</td><td></td></tr><tr><td>移动方法</td><td>Move Statement</td><td>cmd+delete+up/down</td><td></td></tr><tr><td>包裹代码块</td><td>Surround With</td><td>cmd+alt+t</td><td>添加包裹代码块(if、for、try等)</td></tr><tr><td>反向包裹代码块</td><td>Surround With</td><td>cmd+shift+delete</td><td>删除包裹的代码块</td></tr><tr><td>选择于</td><td></td><td>alt+F1</td><td>select Target,可用于快速打开文件目录</td></tr><tr><td>弹出VCS操作</td><td>VCS Operations Popup</td><td>Ctrl+V</td><td></td></tr><tr><td>查找方法</td><td>Find Action</td><td>cmd+shift+a</td></tr><tr><td>隐藏所有面板</td><td>hide all tool windows</td><td>cmd+shift+F12</td></tr></tbody></table><h4 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h4><table><thead><tr><th>名称</th><th>action</th><th>快捷键</th><th>备注</th></tr></thead><tbody><tr><td>开关书签</td><td>Toggle Bookmark</td><td>F3</td><td></td></tr><tr><td>用助记符开关书签</td><td>Toggle Bookmark with Mnemonic</td><td>cmd+f3</td><td></td></tr><tr><td>显示书签</td><td>Show Bookmark</td><td>shift+F3</td><td></td></tr></tbody></table><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><table><thead><tr><th>名称</th><th>下载</th><th>备注</th></tr></thead><tbody><tr><td>CodeGlance</td><td><a href="https://github.com/Vektah/CodeGlance" target="_blank" rel="noopener">https://github.com/Vektah/CodeGlance</a></td><td>代码地图</td><td></td></tr><tr><td>adb-idea</td><td><a href="https://github.com/pbreault/adb-idea" target="_blank" rel="noopener">https://github.com/pbreault/adb-idea</a></td><td>快速清空应用缓存,删除,重新启动,停止</td></tr><tr><td>GsonFormat</td><td><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="noopener">https://github.com/zzz40500/GsonFormat</a></td><td>json转换对象</td></tr></tbody></table><p><strong>add:215-11-25</strong></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://www.jianshu.com/p/364b94a664ff" target="_blank" rel="noopener">Intellij IDEA 一些不为人知的技巧</a></li><li><a href="https://v.qq.com/x/page/t0163iqlus1.html" target="_blank" rel="noopener">操作视频1</a></li><li><a href="https://github.com/lightningMan/config/blob/master/intellij/shortcut-readme.md" target="_blank" rel="noopener">shortcut-readme</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;js-忽略相关目录&quot;&gt;&lt;a href=&quot;#js-忽略相关目录&quot; class=&quot;headerlink&quot; title=&quot;js:忽略相关目录&quot;&gt;&lt;/a&gt;js:忽略相关目录&lt;/h4&gt;&lt;p&gt;在搜索方法的时候,有时候会把dist目录里的方法显示出来.可以在preferences-&amp;gt;Directories 里把不相关的目录过滤掉(excluded).&lt;/p&gt;
&lt;h4 id=&quot;查看改行代码的修改记录&quot;&gt;&lt;a href=&quot;#查看改行代码的修改记录&quot; class=&quot;headerlink&quot; title=&quot;查看改行代码的修改记录&quot;&gt;&lt;/a&gt;查看改行代码的修改记录&lt;/h4&gt;&lt;p&gt;移动到行号位置,右键选择annotate.&lt;/p&gt;
&lt;h4 id=&quot;抽取&quot;&gt;&lt;a href=&quot;#抽取&quot; class=&quot;headerlink&quot; title=&quot;抽取&quot;&gt;&lt;/a&gt;抽取&lt;/h4&gt;&lt;p&gt;alt+cmd+v  变量抽取&lt;br&gt;alt+cmd+f  成员变量抽取&lt;br&gt;alt+cmd+m  方法   抽取&lt;/p&gt;
&lt;h4 id=&quot;函数重构Refactor&quot;&gt;&lt;a href=&quot;#函数重构Refactor&quot; class=&quot;headerlink&quot; title=&quot;函数重构Refactor&quot;&gt;&lt;/a&gt;函数重构Refactor&lt;/h4&gt;&lt;h4 id=&quot;让主先行&quot;&gt;&lt;a href=&quot;#让主先行&quot; class=&quot;headerlink&quot; title=&quot;让主先行&quot;&gt;&lt;/a&gt;让主先行&lt;/h4&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//先写你关心的,再写动词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;.sout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;.return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; name&lt;span class=&quot;selector-class&quot;&gt;.null&lt;/span&gt; 			&lt;span class=&quot;comment&quot;&gt;//判断name==null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; name&lt;span class=&quot;selector-class&quot;&gt;.nn&lt;/span&gt;   			&lt;span class=&quot;comment&quot;&gt;//判断name!=null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; count&lt;span class=&quot;selector-class&quot;&gt;.for&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;//for循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;位置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;跳转到父类&lt;/td&gt;
&lt;td&gt;cmd+u&lt;/td&gt;
&lt;td&gt;Navigate-&amp;gt;Super method&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跳转到定义&lt;/td&gt;
&lt;td&gt;cmd+b&lt;/td&gt;
&lt;td&gt;Navigate-&amp;gt;declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跳转到实现&lt;/td&gt;
&lt;td&gt;cmd+alt+b&lt;/td&gt;
&lt;td&gt;Navigate-&amp;gt;implementation(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;返回&lt;/td&gt;
&lt;td&gt;cmd+[&lt;/td&gt;
&lt;td&gt;Navigate-&amp;gt;Back&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显示文件路径&lt;/td&gt;
&lt;td&gt;alt+cmd+F12&lt;/td&gt;
&lt;td&gt;Navigate-&amp;gt;File Path&lt;/td&gt;
&lt;td&gt;不用再目录里右键Reveal in Finder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double shift&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;search Everywhere&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;增强选择-扩大&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Edit-&amp;gt;extend selection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;增强选择-收缩&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Edit-&amp;gt;shrink selection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显示参数信息&lt;/td&gt;
&lt;td&gt;cmd+p&lt;/td&gt;
&lt;td&gt;View-&amp;gt;Paramaeter Info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提取&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量提取&lt;/td&gt;
&lt;td&gt;alt+cmd+v&lt;/td&gt;
&lt;td&gt;Refactor-&amp;gt;Extract-&amp;gt;Variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方法提取&lt;/td&gt;
&lt;td&gt;alt+cmd+m&lt;/td&gt;
&lt;td&gt;Refactor-&amp;gt;Extract-&amp;gt;Method&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;移动&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单词移动&lt;/td&gt;
&lt;td&gt;alt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;行尾首&lt;/td&gt;
&lt;td&gt;cmd&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;add:2016-12-02&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;action&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;复制当前行&lt;/td&gt;
&lt;td&gt;duplicate Line or block&lt;/td&gt;
&lt;td&gt;cmd+d&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除当前行&lt;/td&gt;
&lt;td&gt;delete line&lt;/td&gt;
&lt;td&gt;cmd+backspace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上下移动当前行&lt;/td&gt;
&lt;td&gt;move line up/down&lt;/td&gt;
&lt;td&gt;alt+shift+up/down&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;移动到指定行&lt;/td&gt;
&lt;td&gt;Line&lt;/td&gt;
&lt;td&gt;cmd+g&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多文本选择&lt;/td&gt;
&lt;td&gt;add selection for next occurrence&lt;/td&gt;
&lt;td&gt;Ctrl+G&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;列选择&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Alt+MouseDrag&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;当前文件方法列表&lt;/td&gt;
&lt;td&gt;File Structure&lt;/td&gt;
&lt;td&gt;cmd+F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;合并行和文字&lt;/td&gt;
&lt;td&gt;join lines&lt;/td&gt;
&lt;td&gt;ctrl+shift+j&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代码提示&lt;/td&gt;
&lt;td&gt;basic&lt;/td&gt;
&lt;td&gt;ctrl+/&lt;/td&gt;
&lt;td&gt;记得按tab…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显示文件路径&lt;/td&gt;
&lt;td&gt;File Path&lt;/td&gt;
&lt;td&gt;alt+cmd+F12&lt;/td&gt;
&lt;td&gt;不用再目录里右键Reveal in Finder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路径中查找&lt;/td&gt;
&lt;td&gt;Find in Path&lt;/td&gt;
&lt;td&gt;shift+ctrl+F&lt;/td&gt;
&lt;td&gt;有个预览功能,屌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方法调用路径&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ctrl+alt+h&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显示参数信息&lt;/td&gt;
&lt;td&gt;Parameter Info&lt;/td&gt;
&lt;td&gt;cmd+p&lt;/td&gt;
&lt;td&gt;显示方法需要的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;打开文件&lt;/td&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;cmd+o&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重写方法列表&lt;/td&gt;
&lt;td&gt;override method&lt;/td&gt;
&lt;td&gt;cmd+n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速查看定义&lt;/td&gt;
&lt;td&gt;quick definition&lt;/td&gt;
&lt;td&gt;cmd+shift+i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩大/收缩选中部分&lt;/td&gt;
&lt;td&gt;Collapse&lt;/td&gt;
&lt;td&gt;cmd+ -/+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大小写转换&lt;/td&gt;
&lt;td&gt;Unshelve&lt;/td&gt;
&lt;td&gt;cmd+shift+u&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://willnewii.github.io/tags/Android/"/>
    
      <category term="cheatsheet" scheme="http://willnewii.github.io/tags/cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>github.io 自定义域名</title>
    <link href="http://willnewii.github.io/20161201/github-io-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <id>http://willnewii.github.io/20161201/github-io-自定义域名/</id>
    <published>2016-12-01T08:00:00.000Z</published>
    <updated>2016-12-07T07:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想把github.io的页面绑定一个域名,看了一下教程,操作如下:</p><ol><li><p>首先在你的username.github.io项目页面,点击settings.Options-&gt;GitHub Pages-&gt;Custom domain 填写上你需要绑定的域名,然后save. 设置完,你在访问原pages域名应该会自动跳转的你刚填写的域名上,但是没有东西…因为你还没有添加映射.</p></li><li><p>打开你的域名管理页面.添加一条解析记录.</p><ul><li>记录类型  CNAME  </li><li>主机记录  blog(我就像绑定一个子域名)   </li><li>记录值 username.github.io(这里是指向你的pages页面) </li></ul></li></ol><p>这样设置完,你就可以通过自己的域名进行访问了.</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">using-a-custom-domain-with-github-pages</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想把github.io的页面绑定一个域名,看了一下教程,操作如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先在你的username.github.io项目页面,点击settings.Options-&amp;gt;GitHub Pages-&amp;gt;Custom domain 填写上
      
    
    </summary>
    
    
      <category term="杂记" scheme="http://willnewii.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>选个dock真难呀...</title>
    <link href="http://willnewii.github.io/20161201/%E9%80%89%E4%B8%AAdock%E7%9C%9F%E9%9A%BE%E5%91%80/"/>
    <id>http://willnewii.github.io/20161201/选个dock真难呀/</id>
    <published>2016-12-01T04:19:00.000Z</published>
    <updated>2016-12-07T07:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己的电脑是14年的macbook air.最近想外接两个屏幕试试,于是就在网上找能支持的设备.后来就看到了他-&gt;belkin的<a href="http://www.belkin.com/us/F4U085/p/P-F4U085/" target="_blank" rel="noopener">Thunderbolt™ 2 Express Dock HD with Cable</a>,一见倾心,一见钟情！！！!然后就深深的中毒了.思前想后一个月还是买了.</p><p>这个设备提供了2个雷电口(因为有一个雷电口要连接主机,其实只有一个),1个hdmi,3个usb,还有耳机口.<br>本来是以为可以通过1个HDMI连接一台显示器,再通过一个雷电口转接线,再连接另外一个显示器.谁知道结果是只有一个显示器工作.本来是因为连接线或者显示设备的问题.就一个搜索,后来在<a href="http://www.caldigit.com/thunderbolt-2-dock-TS2/index-cn.asp" target="_blank" rel="noopener">thunderbolt-2-dock-TS2</a>(另外一款同类型产品)的官网找到了解释.</p><p><strong>要同时支援两个屏幕输出的先决条件为，其中一台必需是Thunderbolt显示器，而另一台则是非Thunderbolt显示器(HDMI, DVI, mDP)。如果想要同时使用两台非Thunderbolt的显示器时，则必须确定在同一个菊链群组中除了TS2还有其他的Thunderbolt设备，再藉由此设备的连接埠串联第二台非Thunderbolt显示器。 (例如，电脑+CalDigit TS2+另一部Thunderbolt设备。)</strong></p><p>大致意思就是要想外接两个屏幕有两个方案</p><ol><li>你要有一台Thunderbolt的显示器.注意,这里有一个很二的事情.Thunderbolt是向下兼容mDP的.事实上通过Thunderbolt转mDP的显示设备dock也是能工作,但是!!!双屏是不支持的.网上有很多,我猜…是都没用过的人,在这类产品面前把Thunderbolt和mDP画了等号.切记…要求是支持Thunderbolt显示器,而不是mDP的显示器.</li><li>组一个菊花链群组.我理解的就是你要有两台dock类型的设备,各自连上一个显示器.或者是自己的显示器支持菊花链,貌似也可以.(⊙o⊙)…听起来很复杂对不对…这个我也没有实践过,所以实施难度不得而知.</li></ol><p>总结:单凭一个dock,外接两个显示器,基本上不可行(要不你有苹果显示器,要不你用两个dock组一个群组).而且,这个结论应该是针对同类型的dock,而不止belkin一家.最新款的Thunderbolt™ 3 Express Dock HD with Cable,不再讨论范围内，</p><h3 id="dell-d3100"><a href="#dell-d3100" class="headerlink" title="dell d3100"></a><a href="http://accessories.ap.dell.com/sna/productdetail.aspx?c=cn&amp;l=zh&amp;s=dhs&amp;cs=cndhs1&amp;sku=452-11717" target="_blank" rel="noopener">dell d3100</a></h3><p>这是在一顿查找过程中看到的第二个类型的dock.基于DisplayLink<a href="http://baike.baidu.com/link?url=cDRcvhQBFn8ORoaqRJjH-G9yUrrXG_us5VpwD7vocTmmukraiiASa4cIfbV7vAXvfxbjb2jYc5tuQSMaICjjd8tybZV3nR5eSvOkxmpOl5m" target="_blank" rel="noopener">(百度百科)</a>技术.</p><p>DisplayLink是一个通过USB接口实现显示器连接到电脑的连接技术，可以非常简单、方便的连接电脑和多个显示设备。该技术可以通过USB接口扩展虚拟的电脑的桌面。目前DisplayLink技术最多可以支持6台显示器同时显示32位色彩的任意分辨率画面。</p><p>跟贝尔金们相比,一个是基于雷电接口,一个是基于USB.听起来是low了好多…不过没有连接上的限制.而且目前以前的方案就这两种.于是就入手了一台.</p><p>今天刚到货,通过两个HDMI接口,连接两台显示器,然后一个usb连接测试手机,一个usb连接键盘,一个耳机口.基本完成了我之前对belkin所预期的任务.而且现在air还空出来了一个雷电口,爽~</p><p>PS：在网上看到说,USB在数据传输上本来不如雷电的,在扩展出去可能会更慢,甚至影响使用.如果你只是需要一个快速传输数据的hub,应该belkin们更适合.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己的电脑是14年的macbook air.最近想外接两个屏幕试试,于是就在网上找能支持的设备.后来就看到了他-&amp;gt;belkin的&lt;a href=&quot;http://www.belkin.com/us/F4U085/p/P-F4U085/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="设备" scheme="http://willnewii.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>关于Thunderbolt</title>
    <link href="http://willnewii.github.io/20161111/Thunderbolt/"/>
    <id>http://willnewii.github.io/20161111/Thunderbolt/</id>
    <published>2016-11-11T03:30:00.000Z</published>
    <updated>2016-12-07T07:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>美国当地时间2011年2月24日，英特尔正式发布了已经宣传数月的英特尔实验室产品代号为“Light Peak”技术，并将其命名为“Thunderbolt（雷电）”。Thunderbolt的研发初衷是为了替代并统一目前电脑上数量繁多性能参差不齐的扩展接口，比如SCSI, SATA, USB, FireWire和 PCI Express。Thunderbolt 是苹果与英特尔（Intel）的合作产物，由Intel开发，通过和苹果的技术合作推向市场。<br><strong>原来不是苹果独家</strong></p><h4 id="原理性能"><a href="#原理性能" class="headerlink" title="原理性能"></a>原理性能</h4><p>Thunderbolt连接技术融合了PCI Express数据传输技术和DisplayPort显示技术，由一颗Intel专用控制芯片进行驱动，通过PCI Express x4、DisplayPort总线与系统芯片组相连。其中PCI Express用于数据传输，DisplayPort则用于显示信号传输，亦可通过直接连接英特尔处理器集成图形核心进行DisplayPort显示输出。<br><strong>所以他可以传输图像,又可以传输数据</strong></p><h4 id="Thunderbolt-3"><a href="#Thunderbolt-3" class="headerlink" title="Thunderbolt 3"></a>Thunderbolt 3</h4><p>Thunderbolt和USB同样是数据端口。英特尔周二宣布,Thunderbolt 3将改变其形式与USB Type-C统一端口。将不再使用以前的方块式的接口，而是兼容USB3.1的标准，但是仍会保留标志性的闪电logo。<br><strong>Thunderbolt3兼容USB Type-C,就是长的像Type-C 的Thunderbolt3</strong></p><h4 id="菊花链-daisy-chain"><a href="#菊花链-daisy-chain" class="headerlink" title="菊花链(daisy chain)"></a>菊花链(daisy chain)</h4><p>像给自己的air连接两台显示器.<a href="https://www.zhihu.com/question/22600143" target="_blank" rel="noopener">Macbook Air 能否连双显示器（非苹果显示器）？</a></p><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul><li><a href="http://baike.baidu.com/link?url=6q-lfP_Llb0YKPuXuA1k8oZrKJebV81VXdlch31beke5nJULzGgl1OOs3fAv5VoSP7B01IYCVhpn5UaUYjrfla" target="_blank" rel="noopener">USB Type-C百度百科</a></li><li><a href="http://www.ggjrw.com/zixun/hulianwang/2015-06-03/3943.html" target="_blank" rel="noopener">Thunderbolt3兼容USB Type-C，完爆USB 3.1</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h4&gt;&lt;p&gt;美国当地时间2011年2月24日，英特尔正式发布了已经宣传数月的英特尔实验室产品代号为“Light Peak”技术，并将其命
      
    
    </summary>
    
    
      <category term="杂记" scheme="http://willnewii.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="设备" scheme="http://willnewii.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>Element</title>
    <link href="http://willnewii.github.io/20160805/Element/"/>
    <id>http://willnewii.github.io/20160805/Element/</id>
    <published>2016-08-05T10:21:00.000Z</published>
    <updated>2017-04-07T02:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://stackoverflow.com/questions/4106538/difference-between-offsetheight-and-clientheight" target="_blank" rel="noopener">元素位置</a><br><img src="http://obfmtiyt5.bkt.clouddn.com/zWca7.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4106538/difference-between-offsetheight-and-clientheight&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES6 笔记</title>
    <link href="http://willnewii.github.io/20160727/ES6-%E7%AC%94%E8%AE%B0/"/>
    <id>http://willnewii.github.io/20160727/ES6-笔记/</id>
    <published>2016-07-27T02:35:00.000Z</published>
    <updated>2017-04-07T02:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><ul><li><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6入门 - 阮一峰的…</a></p></li><li><p><a href="http://qiutc.me/post/es6-cheatsheet.html" target="_blank" rel="noopener">es6 手册</a></p></li><li><p><a href="http://blog.csdn.net/lihongxun945/article/details/49031383" target="_blank" rel="noopener">ES6详解八：模块（Module）！</a></p></li><li><p><a href="https://segmentfault.com/a/1190000004365693" target="_blank" rel="noopener">30分钟掌握ES6/ES2015核心内容（上）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000004368132" target="_blank" rel="noopener">30分钟掌握ES6/ES2015核心内容（下）</a></p></li><li><p><a href="http://www.barretlee.com/blog/2016/07/09/a-kickstarter-guide-to-writing-es6/" target="_blank" rel="noopener">ECMAScript 6 扫盲</a></p></li><li><p><a href="https://segmentfault.com/a/1190000002789651" target="_blank" rel="noopener">[ JS 进阶 ] 基本类型 引用类型 简单赋值 对象引用</a></p></li><li><p><a href="http://base-n.github.io/koa-generator-examples/node4/classes.html" target="_blank" rel="noopener">一起学koa</a></p></li></ul><h4 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h4><ul><li><a href="https://segmentfault.com/a/1190000004394726?utm_source=APP&amp;utm_medium=iOS&amp;utm_campaign=socialShare" target="_blank" rel="noopener">使用ES6开发流程</a></li><li><a href="http://www.es6fiddle.net/" target="_blank" rel="noopener">运行es6代码的网站</a></li></ul><h3 id="let-var-const-区别"><a href="#let-var-const-区别" class="headerlink" title="let var const 区别"></a>let var const 区别</h3><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul><li>const 的定义是不可重新赋值的值，与不可变的值(immutable value)不同；const 定义的Object，在定义之后仍可以修改其属性。</li></ul><h4 id="const-let"><a href="#const-let" class="headerlink" title="const let"></a>const let</h4><ul><li>let 关键词声明的变量不具备变量提升（hoisting）特性(先定义,再使用)</li><li>let 和 const 声明只在最靠近的一个块中（花括号内）有效(作用域只在当前代码块)</li><li>const 在声明时必须被赋值</li></ul><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getFinalPrice = <span class="function">(<span class="params">price, tax=<span class="number">0.7</span></span>) =&gt;</span> price + price * tax;</span><br><span class="line">getFinalPrice(<span class="number">500</span>); <span class="comment">// 850</span></span><br></pre></td></tr></table></figure><h3 id="模板语法和分隔符"><a href="#模板语法和分隔符" class="headerlink" title="模板语法和分隔符"></a>模板语法和分隔符</h3><p>ES6 中有一种十分简洁的方法组装一堆字符串和变量。</p><ul><li>${ … } 用来渲染一个变量</li><li>` 作为分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">'Barret'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;user&#125;</span>!`</span>); <span class="comment">// Hi Barret!</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="for…of-VS-for…in"><a href="#for…of-VS-for…in" class="headerlink" title="for…of VS for…in"></a>for…of VS for…in</h3><p>for…of 用于遍历一个迭代器，如数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nicknames = [<span class="string">'di'</span>, <span class="string">'boo'</span>, <span class="string">'punkeye'</span>];</span><br><span class="line">nicknames.size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">of</span> nicknames) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line">Result: di, boo, punkeye</span><br></pre></td></tr></table></figure></p><p>for…in 用来遍历对象中的属性：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nicknames = [<span class="string">'di'</span>, <span class="string">'boo'</span>, <span class="string">'punkeye'</span>];</span><br><span class="line">nicknames.size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">in</span> nicknames) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">Result</span>: <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="built_in">size</span></span><br></pre></td></tr></table></figure></p><h3 id="Map-和-WeakMap"><a href="#Map-和-WeakMap" class="headerlink" title="Map 和 WeakMap"></a>Map 和 WeakMap</h3><p>WeakMap 就是一个 Map，只不过它的所有 key 都是弱引用，意思就是 WeakMap 中的东西垃圾回收时不考虑，使用它不用担心内存泄漏问题。</p><h3 id="Set-和-WeakSet"><a href="#Set-和-WeakSet" class="headerlink" title="Set 和 WeakSet"></a>Set 和 WeakSet</h3><p>Set 对象是一组不重复的值，重复的值将被忽略，值类型可以是原始类型(number,string,boolean,null,undefined)和引用类型</p><p>可以通过 forEach 和 for…of 来遍历 Set 对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mySet.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 'strings'</span></span><br><span class="line">    <span class="comment">// Object &#123; a: 1, b: 2 &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p>ES6 对 Promise 有了原生的支持，一个 Promise 是一个等待被异步执行的对象，当它执行完成后，其状态会变成 resolved 或者 rejected。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* condition */</span>) &#123;</span><br><span class="line">    <span class="comment">// fulfilled successfully</span></span><br><span class="line">    resolve(<span class="comment">/* value */</span>);  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// error, rejected</span></span><br><span class="line">    reject(<span class="comment">/* reason */</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>每一个 Promise 都有一个 .then 方法，这个方法接受两个参数，第一个是处理 resolved 状态的回调，一个是处理 rejected 状态的回调：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="keyword">then</span>(<span class="function"><span class="params">(val)</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Promise Resolved"</span>, val),</span><br><span class="line">       (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"Promise Rejected"</span>, err));</span><br></pre></td></tr></table></figure></p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="export-import-命令"><a href="#export-import-命令" class="headerlink" title="export,import 命令"></a>export,import 命令</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'Rainbow'</span></span><br></pre></td></tr></table></figure><p>ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'Rainbow'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="string">'24'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="comment">&#123;name, age&#125;</span>;</span><br></pre></td></tr></table></figure></p><p>定义好模块的输出以后就可以在另外一个模块通过import引用。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br></pre></td></tr></table></figure></p><h4 id="整体输入，module指令"><a href="#整体输入，module指令" class="headerlink" title="整体输入，module指令"></a>整体输入，module指令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过 <strong>import * as</strong> 就完成了模块整体的导入。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * <span class="keyword">as</span> <span class="keyword">test</span> <span class="keyword">form</span> './<span class="keyword">test</span>.js';</span><br></pre></td></tr></table></figure></p><p>通过指令 <strong>module</strong> 也可以达到整体的输入。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> test <span class="keyword">from</span> <span class="string">'test.js'</span>;</span><br><span class="line">test.getName();</span><br></pre></td></tr></table></figure></p><h4 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function<br></h4><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="http://willnewii.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Angular 资料</title>
    <link href="http://willnewii.github.io/20160721/Angular-%E8%B5%84%E6%96%99/"/>
    <id>http://willnewii.github.io/20160721/Angular-资料/</id>
    <published>2016-07-21T09:19:00.000Z</published>
    <updated>2017-04-07T02:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Angular-2"><a href="#Angular-2" class="headerlink" title="Angular 2"></a>Angular 2</h4><ul><li><p><a href="https://angular.cn/" target="_blank" rel="noopener">angular2 中文站</a></p></li><li><p><a href="https://angular.cn/docs/ts/latest/cookbook/ts-to-js.html" target="_blank" rel="noopener">TS-to-JS</a></p></li><li><p><a href="http://yuyang041060120.github.io/" target="_blank" rel="noopener">yuyang blog</a></p></li><li><p><a href="http://learnangular2.com/" target="_blank" rel="noopener">learnangular2 Built by the Ionic Team</a></p></li><li><p><a href="https://github.com/gf-rd/blog/issues/21" target="_blank" rel="noopener">Angular2开发指南- 翻译系列总览</a></p></li><li><p><a href="https://segmentfault.com/a/1190000004973632" target="_blank" rel="noopener">Angular2 Dependency Injection</a></p></li><li><p><a href="https://segmentfault.com/a/1190000003781566" target="_blank" rel="noopener">前端之Angular2实战：依赖注入详解与应用(2015)</a></p></li></ul><h4 id="Angular-1-x"><a href="#Angular-1-x" class="headerlink" title="Angular 1.x"></a>Angular 1.x</h4><ul><li><p><a href="http://docs.ngnice.com/guide" target="_blank" rel="noopener">Angular文档指南</a></p></li><li><p><a href="https://gitcafe.com/Angularjs/Angularjs-Developer-Guide/blob/master/README.md" target="_blank" rel="noopener">Angular中文开发指南</a></p></li></ul><h4 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h4><ul><li><a href="http://hicc.me/minify-concat-angular-js-with-gulp/" target="_blank" rel="noopener">使用gulp压缩合并AngularJS项目中js</a></li><li><a href="http://blog.jobbole.com/62249/" target="_blank" rel="noopener">AngularJS 指令实践指南 </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Angular-2&quot;&gt;&lt;a href=&quot;#Angular-2&quot; class=&quot;headerlink&quot; title=&quot;Angular 2&quot;&gt;&lt;/a&gt;Angular 2&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://angular.cn/&quot; tar
      
    
    </summary>
    
    
      <category term="前端" scheme="http://willnewii.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
